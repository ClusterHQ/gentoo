--- src/donet.h.old	2007-01-16 13:53:05.000000000 +0100
+++ src/donet.h	2007-01-16 13:53:20.000000000 +0100
@@ -489,7 +489,7 @@
   /** Exception throwed when there was an error with resolving hostname. */
   class ResolveException {};
 
-  TNET_RESOLVER::TNET_RESOLVER ();
+  TNET_RESOLVER ();
 
   static std::string GetHostName ();
 
--- src/dofight.h.old	2007-01-16 13:53:31.000000000 +0100
+++ src/dofight.h	2007-01-16 13:53:43.000000000 +0100
@@ -230,7 +230,7 @@
   void SetProtection(const float new_value)
     {if (new_value > 1.0f) protection = 1.0f; else if (new_value < 0) protection = 0; else protection = new_value;};
 
-  TDEFENSE::TDEFENSE()
+  TDEFENSE()
     { armour = 0; protection = 0; }
 
 private:
--- src/doraces.h.old	2007-01-16 13:53:50.000000000 +0100
+++ src/doraces.h	2007-01-16 13:54:02.000000000 +0100
@@ -755,7 +755,7 @@
   //!<Sets if unit can walk on source or building can be built on source when is empty.
   void SetHideable(bool hide) {hideable = hide;};
   //!<Tests whether position is available for this kind of the building.
-  bool TSOURCE_ITEM::IsPositionAvailable(int pos_x, int pos_y);
+  bool IsPositionAvailable(int pos_x, int pos_y);
 
   //! Specifies on which terrains it is able to build the item.
   TINTERVAL<TTERRAIN_ID> buildable[DAT_SEGMENTS_COUNT];
--- src/dodraw.h.old	2007-01-16 13:54:12.000000000 +0100
+++ src/dodraw.h	2007-01-16 13:54:25.000000000 +0100
@@ -140,7 +140,7 @@
   void SetProjection(TPROJECTION_TYPE projection);
   void Update();
 
-  TPROJECTION::TPROJECTION() { SetProjection(PRO_MENU); };
+  TPROJECTION() { SetProjection(PRO_MENU); };
 };
 
 
--- src/dounits.h.old	2007-01-16 13:54:41.000000000 +0100
+++ src/dounits.h	2007-01-16 13:55:05.000000000 +0100
@@ -1094,7 +1094,7 @@
 
   TSOURCE_UNIT * FindNewSource(TPOSITION_3D position);
   //bool FindNewSource(TPOSITION_3D position);
-  TSOURCE_UNIT * TWORKER_UNIT::IsSourceOnPosition(int pos_x, int pos_y);
+  TSOURCE_UNIT * IsSourceOnPosition(int pos_x, int pos_y);
 
   //! Constructor.
   TWORKER_UNIT(int uplayer, int ux, int uy, int uz, int udirection, TFORCE_ITEM *mi, int new_unit_id, bool global_unit)
--- src/dowalk.h.old	2007-01-16 13:55:13.000000000 +0100
+++ src/dowalk.h	2007-01-16 13:55:39.000000000 +0100
@@ -270,7 +270,7 @@
   bool TestLastPathPosition(void);              //!< Tests if a_stem is last step.
   TPOSITION_3D GetGoalPosition();                       //!<Get goal of the path.
   TPATH_LIST* CreateCopy(int shift_x, int shift_y, int shift_z);          //!<The path list create copy of the itself with shift.
-  double TPATH_LIST::CountTime(TFORCE_UNIT *unit);      //!<Counts the time, which unit spends on the exact way.
+  double CountTime(TFORCE_UNIT *unit);      //!<Counts the time, which unit spends on the exact way.
   void DecreaseSteps(int st_count) { steps -= st_count;};    //! Decreases variable steps, used when building is build, unit cant go to the goal, but just near the newly built building.
   void IncreaseASteps();                        //!< Increases actuall step
   void DecreaseASteps();                        //!< Decrease actuall step
@@ -297,10 +297,10 @@
   //! Coordinates in the map, each step of the path is storaged in this array.
   TPOSITION_3D path_pos[WLK_NODES_NUM];
 
-  TPATH_NODE::TPATH_NODE(TPATH_NODE *first, TPOSITION_3D adding);  //!< Adding constructor.
-  TPATH_NODE::TPATH_NODE(TPOSITION_3D goal);    //!< Constructor.
+  TPATH_NODE(TPATH_NODE *first, TPOSITION_3D adding);  //!< Adding constructor.
+  TPATH_NODE(TPOSITION_3D goal);    //!< Constructor.
 private:
-  TPATH_NODE::TPATH_NODE(TPATH_NODE &origin, int sx, int sy, int sz);   //!< Constructor creates copy with shift.
+  TPATH_NODE(TPATH_NODE &origin, int sx, int sy, int sz);   //!< Constructor creates copy with shift.
   friend TPATH_LIST* TPATH_LIST::CreateCopy(int, int, int);
 };
 
--- src/doconfig.h.old	2007-01-16 13:55:48.000000000 +0100
+++ src/doconfig.h	2007-01-16 13:56:01.000000000 +0100
@@ -211,7 +211,7 @@
   GLubyte pr_warfog_color[4];         //!< Precomputed warfog color and alfa-channel. [-128..127]
   double pr_expected_frame_duration;  //!< Precomputed expected frame duration from max_frame_rate. [seconds]
 
-  TCONFIG::TCONFIG();
+  TCONFIG();
 };
 
 
--- src/doengine.h.old	2007-01-16 13:56:08.000000000 +0100
+++ src/doengine.h	2007-01-16 13:56:25.000000000 +0100
@@ -212,7 +212,7 @@
   std::string GetRacIdName (std::string name);
   std::string GetRacName (std::string id_name);
 
-  std::string TMAP_INFO_LIST::GetMapName (std::string id_name);
+  std::string GetMapName (std::string id_name);
 
   TMAP_INFO_LIST (void) { map_list = NULL; rac_list = NULL;};
   ~TMAP_INFO_LIST (void) { ClearMapList(); ClearRacList();};
@@ -276,7 +276,7 @@
     order_panel = NULL;
   }
 
-  TPANEL_INFO::TPANEL_INFO() { Clear(); }
+  TPANEL_INFO() { Clear(); }
 };
 
 extern TPANEL_INFO panel_info;
