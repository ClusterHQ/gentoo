* patch grabbed from 0.17 sources to deal with Solaris 10/x86_64
  compilation (and runtime crash) issues

--- gettext-tools/gnulib-lib/vasprintf.c
+++ gettext-tools/gnulib-lib/vasprintf.c
@@ -1,11 +1,11 @@
 /* Like vsprintf but provides a pointer to malloc'd storage, which must
    be freed by the caller.
-   Copyright (C) 1994, 1998, 1999, 2000-2003, 2006 Free Software Foundation, Inc.
+   Copyright (C) 1994, 1998-1999, 2000-2003, 2006-2007 Free Software Foundation, Inc.
 
-This program is free software; you can redistribute it and/or modify
+This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -13,13 +13,12 @@
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
-along with this program; if not, write to the Free Software Foundation,
-Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
+along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 #include <config.h>
 
 /* Specification.  */
-#include "vasprintf.h"
+#include <stdio.h>
 
 #include <stdio.h>
 #include <string.h>
@@ -32,14 +31,15 @@
 #endif
 
 static int
-int_vasprintf (char **result, const char *format, va_list *args)
+int_vasprintf (char **result, const char *format, va_list args)
 {
   const char *p = format;
   /* Add one to make sure that it is never zero, which might cause malloc
      to return NULL.  */
   size_t total_width = strlen (format) + 1;
-  va_list ap = *args;
+  va_list ap;
 
+  va_copy (ap, args);
   while (*p != '\0')
     {
       if (*p++ == '%')
@@ -107,12 +107,14 @@
 	  p++;
 	}
     }
+  va_end (ap);
+
 #ifdef TEST
   global_total_width = total_width;
 #endif
   *result = malloc (total_width);
   if (*result != NULL)
-    return vsprintf (*result, format, *args);
+    return vsprintf (*result, format, args);
   else
     return -1;
 }
@@ -120,7 +122,7 @@
 int
 vasprintf (char **result, const char *format, va_list args)
 {
-  return int_vasprintf (result, format, &args);
+  return int_vasprintf (result, format, args);
 }
 
 int
@@ -150,6 +152,7 @@
 
   va_start (args, format);
   vasprintf (&result, format, args);
+  va_end (args);
   if (strlen (result) < global_total_width)
     printf ("PASS: ");
   else
--- gettext-tools/libgettextpo/vasprintf.c
+++ gettext-tools/libgettextpo/vasprintf.c
@@ -1,11 +1,11 @@
 /* Like vsprintf but provides a pointer to malloc'd storage, which must
    be freed by the caller.
-   Copyright (C) 1994, 1998, 1999, 2000-2003, 2006 Free Software Foundation, Inc.
+   Copyright (C) 1994, 1998-1999, 2000-2003, 2006-2007 Free Software Foundation, Inc.
 
-This program is free software; you can redistribute it and/or modify
+This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
@@ -13,13 +13,12 @@
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
-along with this program; if not, write to the Free Software Foundation,
-Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
+along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 #include <config.h>
 
 /* Specification.  */
-#include "vasprintf.h"
+#include <stdio.h>
 
 #include <stdio.h>
 #include <string.h>
@@ -32,14 +31,15 @@
 #endif
 
 static int
-int_vasprintf (char **result, const char *format, va_list *args)
+int_vasprintf (char **result, const char *format, va_list args)
 {
   const char *p = format;
   /* Add one to make sure that it is never zero, which might cause malloc
      to return NULL.  */
   size_t total_width = strlen (format) + 1;
-  va_list ap = *args;
+  va_list ap;
 
+  va_copy (ap, args);
   while (*p != '\0')
     {
       if (*p++ == '%')
@@ -107,12 +107,14 @@
 	  p++;
 	}
     }
+  va_end (ap);
+
 #ifdef TEST
   global_total_width = total_width;
 #endif
   *result = malloc (total_width);
   if (*result != NULL)
-    return vsprintf (*result, format, *args);
+    return vsprintf (*result, format, args);
   else
     return -1;
 }
@@ -120,7 +122,7 @@
 int
 vasprintf (char **result, const char *format, va_list args)
 {
-  return int_vasprintf (result, format, &args);
+  return int_vasprintf (result, format, args);
 }
 
 int
@@ -150,6 +152,7 @@
 
   va_start (args, format);
   vasprintf (&result, format, args);
+  va_end (args);
   if (strlen (result) < global_total_width)
     printf ("PASS: ");
   else
