
Submitted upstream somewhere before 3 Mar 2008, still waiting for review.
I wont re-submit new versions all the time as long as there is no reaction
at the list. http://lists.gnu.org/archive/html/libtool-patches/2008-03/msg00011.html

diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/libltdl/config/ltmain.m4sh libtool-2.2.6/libltdl/config/ltmain.m4sh
--- libtool-2.2.6.orig/libltdl/config/ltmain.m4sh	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/libltdl/config/ltmain.m4sh	2009-04-01 16:33:03 +0200
@@ -1698,14 +1698,19 @@
 	# If the file is missing, and there is a .exe on the end, strip it
 	# because it is most likely a libtool script we actually want to
 	# install
-	stripped_ext=""
-	case $file in
-	  *.exe)
-	    if test ! -f "$file"; then
-	      func_stripname '' '.exe' "$file"
-	      file=$func_stripname_result
-	      stripped_ext=".exe"
-	    fi
+	case $host in
+	*winnt*) ;;
+	*)
+	    stripped_ext=""
+	    case $file in
+	      *.exe)
+		if test ! -f "$file"; then
+		  func_stripname '' '.exe' "$file"
+		  file=$func_stripname_result
+		  stripped_ext=".exe"
+		fi
+		;;
+	    esac
 	    ;;
 	esac
 
@@ -1985,7 +1990,7 @@
 } lt_dlsymlist;
 "
 	  case $host in
-	  *cygwin* | *mingw* | *cegcc* )
+	  *cygwin* | *mingw* | *cegcc* | *winnt* )
 	    $ECHO >> "$output_objdir/$my_dlsyms" "\
 /* DATA imports from DLLs on WIN32 con't be const, because
    runtime relocations are performed -- see ld's documentation
@@ -2062,8 +2067,19 @@
 	  esac
 	done
 
+  #
+  # if parity is used as compiler, we need to use -xc++ to force
+  # the C file into C++ to be able to use non-const initializers
+  # for variables (other variables from shared libraries for example)
+  #
+  case "$host" in
+  *winnt*)
+    PARITY_CFLAGS="-xc++"
+    ;;
+  esac
+
 	# Now compile the dynamic symbol file.
-	func_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable "$my_dlsyms")' 'exit $?'
+	func_show_eval '(cd $output_objdir && $LTCC$symtab_cflags $PARITY_CFLAGS -c$no_builtin_flag$pic_flag_for_symtable "$my_dlsyms")' 'exit $?'
 
 	# Clean up the generated files.
 	func_show_eval '$RM "$output_objdir/$my_dlsyms" "$nlist" "${nlist}S" "${nlist}T"'
@@ -6671,7 +6687,7 @@
 	   len=$func_len_result &&
 	   test "$len" -lt "$max_cmd_len" || test "$max_cmd_len" -le -1; then
 	  :
-	else
+	elif { case $host in *-*-winnt*) false;; *) true;; esac ; }; then
 	  # The command line is too long to link in one step, link piecewise
 	  # or, if using GNU ld and skipped_export is not :, use a linker
 	  # script.
@@ -7369,10 +7385,15 @@
       $opt_dry_run || {
 	# win32 will think the script is a binary if it has
 	# a .exe suffix, so we strip it off here.
-	case $output in
-	  *.exe) func_stripname '' '.exe' "$output"
-	         output=$func_stripname_result ;;
-	esac
+  case $host in
+  *winnt*) ;;
+  *)
+    case $output in
+      *.exe) func_stripname '' '.exe' "$output"
+             output=$func_stripname_result ;;
+    esac
+    ;;
+  esac
 	# test for cygwin because mv fails w/o .exe extensions
 	case $host in
 	  *cygwin*)
@@ -7867,17 +7888,22 @@
       *)
 	if test "$mode" = clean ; then
 	  noexename=$name
-	  case $file in
-	  *.exe)
-	    func_stripname '' '.exe' "$file"
-	    file=$func_stripname_result
-	    func_stripname '' '.exe' "$name"
-	    noexename=$func_stripname_result
-	    # $file with .exe has already been added to rmfiles,
-	    # add $file without .exe
-	    rmfiles="$rmfiles $file"
-	    ;;
-	  esac
+    case $host in
+    *winnt*) ;;
+	*)
+      case $file in
+      *.exe)
+        func_stripname '' '.exe' "$file"
+        file=$func_stripname_result
+        func_stripname '' '.exe' "$name"
+        noexename=$func_stripname_result
+        # $file with .exe has already been added to rmfiles,
+        # add $file without .exe
+        rmfiles="$rmfiles $file"
+        ;;
+      esac
+      ;;
+    esac
 	  # Do a test to see if this is a libtool program.
 	  if func_ltwrapper_p "$file"; then
 	    if func_ltwrapper_executable_p "$file"; then
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/libltdl/libltdl/lt_system.h libtool-2.2.6/libltdl/libltdl/lt_system.h
--- libtool-2.2.6.orig/libltdl/libltdl/lt_system.h	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/libltdl/libltdl/lt_system.h	2009-04-01 15:41:40 +0200
@@ -122,7 +122,9 @@
 # define LT_PATHSEP_CHAR	':'
 #endif
 
-#if defined(_MSC_VER) /* Visual Studio */
+/* Visual Studio - or parity, which brings a few enhancements
+ * to microsofts runtime, and uses the microsoft compiler */
+#if defined(_MSC_VER) && !defined(R_OK)
 #  define R_OK 4
 #endif
 
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/libltdl/loaders/dlopen.c libtool-2.2.6/libltdl/loaders/dlopen.c
--- libtool-2.2.6.orig/libltdl/loaders/dlopen.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/libltdl/loaders/dlopen.c	2009-04-01 15:41:40 +0200
@@ -171,7 +171,9 @@
 
   if (advise)
     {
-#ifdef RTLD_GLOBAL
+	  /* parity (winnt) has RTLD_GLOBAL defined for compatability, but
+	   * it has no effect... */
+#if defined(RTLD_GLOBAL ) && !defined(__PARITY__)
       /* If there is some means of asking for global symbol resolution,
          do so.  */
       if (advise->is_symglobal)
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/libltdl/loaders/loadlibrary.c libtool-2.2.6/libltdl/loaders/loadlibrary.c
--- libtool-2.2.6.orig/libltdl/loaders/loadlibrary.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/libltdl/loaders/loadlibrary.c	2009-04-01 15:41:40 +0200
@@ -146,6 +146,11 @@
 #elif defined(__CYGWIN__)
       cygwin_conv_to_full_win32_path (filename, wpath);
       len = 0;
+#elif defined(__PARITY__)
+      /* Use parity's internal runtime library capabilities, which
+       * aren't exposed normally... */
+      extern const char* LoaderConvertPathToNative(const char*);
+      strcpy(wpath, LoaderConvertPathToNative(filename));
 #else
       strcpy(wpath, filename);
 #endif
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/libltdl/m4/argz.m4 libtool-2.2.6/libltdl/m4/argz.m4
--- libtool-2.2.6.orig/libltdl/m4/argz.m4	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/libltdl/m4/argz.m4	2009-04-01 15:41:40 +0200
@@ -42,6 +42,10 @@
         [if argz actually works],
         [lt_cv_sys_argz_works],
         [[case $host_os in #(
+     *winnt*)
+       # Windows does not provide any argz stuff, so use our own.
+       lt_cv_sys_argz_works=no
+       ;; #(
 	 *cygwin*)
 	   lt_cv_sys_argz_works=no
 	   if test "$cross_compiling" != no; then
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/libltdl/m4/libtool.m4 libtool-2.2.6/libltdl/m4/libtool.m4
--- libtool-2.2.6.orig/libltdl/m4/libtool.m4	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/libltdl/m4/libtool.m4	2009-04-01 15:41:40 +0200
@@ -152,6 +152,18 @@
 dnl
 AC_REQUIRE([AC_PROG_LN_S])dnl
 test -z "$LN_S" && LN_S="ln -s"
+
+# on winnt, the microsoft compiler is used behind the scenes.
+# the wrapper around it is capable of resolving links, but still
+# cl.exe chokes on header files which are linked (the wrapper
+# cannot know of these...).
+# Everybody would be happy with ln -s, except libtoolize without
+# --copy. there ln -s breaks the testsuite, since it tries to
+# compile linked source, which is nor supported by the compiler.
+case $host_os in
+winnt*) LN_S="cp -p" ;;
+esac
+
 _LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl
 dnl
 AC_REQUIRE([LT_CMD_MAX_LEN])dnl
@@ -1552,6 +1564,12 @@
     lt_cv_sys_max_cmd_len=196608
     ;;
 
+  winnt*)
+    # This can be any system underneath (interix or cygwin). For now handle
+    # this the same as on interix (since interix is the primary platform).
+    lt_cv_sys_max_cmd_len=196608
+    ;;
+
   osf*)
     # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure
     # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not
@@ -2003,9 +2021,19 @@
 old_striplib=
 AC_MSG_CHECKING([whether stripping libraries is possible])
 if test -n "$STRIP" && $STRIP -V 2>&1 | $GREP "GNU strip" >/dev/null; then
-  test -z "$old_striplib" && old_striplib="$STRIP --strip-debug"
-  test -z "$striplib" && striplib="$STRIP --strip-unneeded"
-  AC_MSG_RESULT([yes])
+  case $host_os in
+  winnt*)
+    # stripping is not save here, since host utils are used
+    # to work on native windows libraries (which should be the
+    # same, but we never know...)
+    AC_MSG_RESULT([no])
+    ;;
+  *)
+    test -z "$old_striplib" && old_striplib="$STRIP --strip-debug"
+    test -z "$striplib" && striplib="$STRIP --strip-unneeded"
+    AC_MSG_RESULT([yes])
+    ;;
+  esac
 else
 # FIXME - insert some real tests, host_os isn't really good enough
   case $host_os in
@@ -2402,6 +2430,104 @@
   hardcode_into_libs=yes
   ;;
 
+winnt*)
+  version_type=linux
+  need_lib_prefix=no
+  need_version=no
+  shlibpath_var=LD_LIBRARY_PATH
+  hardcode_into_libs=yes
+ 
+  #
+  # the library name should not contain any minor version
+  # numbers, since this would be too strict. Windows has
+  # the library name hardcoded always, so it won't listen
+  # to -soname's.
+  #
+  library_names_spec='${libname}${release}${shared_ext}$major ${libname}${shared_ext}'
+
+  #
+  # the real soname and dlname (which is set to soname)
+  # contains the .dll extension that parity adds.
+  #
+  soname_spec='${libname}${release}${shared_ext}$major.dll'
+  dynamic_linker='parity'
+  sys_lib_search_path_spec=
+  sys_lib_dlsearch_path_spec=
+
+  #
+  # Calculate the system library directories, by asking
+  # parity's configuration for it.
+  # WARNING: does not work correctly with paths with spaces.
+  #
+  parity_conf=
+
+  #
+  # try by asking first... This works from parity 1.0.4 onwards.
+  #
+  parity_sysconf=`$CC -v | grep Sysconf | sed -e 's,^Sysconf .*: ,,g'`
+
+  if test -n "${parity_sysconf}"; then
+    if test -d "${parity_sysconf}" -a -f "${parity_sysconf}/parity.conf"; then
+      parity_conf="${parity_sysconf}/parity.conf"
+    fi
+  fi
+
+  #
+  # couldn't determine sysconfdir, so assume, its ../etc from parity.
+  #
+  if test -z "${parity_conf}"; then
+    save_IFS=$IFS
+    IFS=$PATH_SEPARATOR
+    set dummy $PATH
+    shift
+
+    IFS=$save_IFS
+
+    for p in "$[@]"; do
+        if test -x "$p/$LD" && test -f "$p/../etc/parity.conf"; then
+            parity_conf="$p/../etc/parity.conf"
+            break
+        fi
+    done
+  fi
+
+  if test -n "${parity_conf}"; then
+    library_paths=`grep -e ".*LibraryPaths.*=" $parity_conf | sed -e "s,.*LibraryPaths.*=[[ \t]]*\(.*\)\$,\1,g"`
+    sys_lib_search_path_spec=`echo $library_paths`
+  else
+    # panic: what am i supposed to do now?
+    sys_lib_search_path_spec=
+  fi
+
+  #
+  # we assume that parity's loader feature is enabled. this
+  # enables us to use LD_LIBRARY_PATH, LD_RUN_PATH and -rpath
+  #
+  runpath_var=LD_RUN_PATH
+  shlibpath_overrides_runpath=yes
+
+  #
+  # we need seperate postinstall and postuninstall commands
+  # to carry .dll and .pdb files with us.
+  #
+  # WARNING: the commands below (especially the ${x%..} variable
+  # syntax) work perfectly on ksh (/bin/sh) and bash on interix.
+  # Other shells have not been tested and may need some porting.
+  #
+  postinstall_cmds='
+      $install_prog $dir/$dlname $destdir/$dlname~
+      test ! -f $dir/${dlname%.dll}.pdb || $install_prog $dir/${dlname%.dll}.pdb $destdir/${dlname%.dll}.pdb~
+      chmod 755 $destdir/$dlname~
+      test ! -f $destdir/${dlname%.dll}.pdb || chmod 644 $destdir/${dlname%.dll}.pdb'
+
+  postuninstall_cmds='
+      dll=`$SHELL 2>&1 -c '\''. $file;
+          echo \${dlname}'\''`~
+      pdb=\${dll%.dll}.pdb~
+      rm $dir/\$dll~
+      rm $dir/\$pdb'
+  ;;
+
 irix5* | irix6* | nonstopux*)
   case $host_os in
     nonstopux*) version_type=nonstopux ;;
@@ -3061,6 +3187,16 @@
   lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\.so|\.a)$'
   ;;
 
+winnt*)
+  #
+  # there is no suitable file_magic, and match_patter somehow
+  # does not seem to work in all cases, namely if native windows
+  # libraries are involved in linking, which - of course - don't
+  # match the normal naming scheme.
+  #
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
 irix5* | irix6* | nonstopux*)
   case $LD in
   *-32|*"-32 ") libmagic=32-bit;;
@@ -3256,7 +3392,7 @@
 [AC_REQUIRE([AC_CANONICAL_HOST])dnl
 LIBM=
 case $host in
-*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin*)
+*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin* | *-winnt*)
   # These system don't have libm, or don't need it
   ;;
 *-ncr-sysv4.3*)
@@ -3367,6 +3503,25 @@
 # so use this general approach.
 lt_cv_sys_global_symbol_to_cdecl="sed -n -e 's/^T .* \(.*\)$/extern int \1();/p' -e 's/^$symcode* .* \(.*\)$/extern char \1;/p'"
 
+case $host_os in
+winnt*)
+  #
+  # parity knows how to handle dllimport declspecs when there is no
+  # shared library in play, so we use it allways to be on the safe side.
+  #
+  lt_cv_sys_global_symbol_to_cdecl="awk '{ print \"extern __declspec(dllimport) int \" \$][3 \";\" }'"
+
+  #
+  # WARNING: since parity may use the Microsoft compiler as backend
+  # symbol names could be mangled in MS style, which means, they are
+  # not valid C identifiers, so we *cannot* generate C code that
+  # tries to do something with those C++ variables, because it won't
+  # compile!
+  # This could be done in assembly which would solve this problem.
+  #
+  ;;
+esac
+
 # Transform an extracted symbol line into symbol name and symbol address
 lt_cv_sys_global_symbol_to_c_name_address="sed -n -e 's/^: \([[^ ]]*\) $/  {\\\"\1\\\", (void *) 0},/p' -e 's/^$symcode* \([[^ ]]*\) \([[^ ]]*\)$/  {\"\2\", (void *) \&\2},/p'"
 lt_cv_sys_global_symbol_to_c_name_address_lib_prefix="sed -n -e 's/^: \([[^ ]]*\) $/  {\\\"\1\\\", (void *) 0},/p' -e 's/^$symcode* \([[^ ]]*\) \(lib[[^ ]]*\)$/  {\"\2\", (void *) \&\2},/p' -e 's/^$symcode* \([[^ ]]*\) \([[^ ]]*\)$/  {\"lib\2\", (void *) \&\2},/p'"
@@ -3479,6 +3634,18 @@
 	  lt_save_CFLAGS="$CFLAGS"
 	  LIBS="conftstm.$ac_objext"
 	  CFLAGS="$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)"
+
+    #
+    # parity needs -xc++ to force the file in c++ mode. this is
+    # because of variables beeing initialized with non-constant
+    # values (variables from shared libraries)
+    #
+    case "$host_os" in
+    winnt*)
+      CFLAGS="${CFLAGS} -xc++"
+      ;;
+    esac
+
 	  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then
 	    pipe_works=yes
 	  fi
@@ -3682,6 +3849,19 @@
 	# This is c89, which is MS Visual C++ (no shared libs)
 	# Anyone wants to do a port?
 	;;
+
+      winnt*)
+        #
+        # -fPIC and -fpic have the same effect for parity: none
+        # this means it's of no danger to pass it in, since parity
+        # simply ignores it, still we save some command line parsing
+        # time, when not passing it :)
+        #
+        _LT_TAGVAR(lt_prog_compiler_pic, $1)=''
+        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+        _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'
+        ;;
+
       irix5* | irix6* | nonstopux*)
 	case $cc_basename in
 	  CC*)
@@ -3971,6 +4151,18 @@
       _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'
       ;;
 
+    winnt*)
+      #
+      # -fPIC and -fpic have the same effect for parity: none
+      # this means it's of no danger to pass it in, since parity
+      # simply ignores it, still we save some command line parsing
+      # time, when not passing it :)
+      #
+      _LT_TAGVAR(lt_prog_compiler_pic, $1)=''
+      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
+      _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'
+      ;;
+
     irix5* | irix6* | nonstopux*)
       _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'
       # PIC (with -KPIC) is the default.
@@ -4243,6 +4435,12 @@
     # we just hope/assume this is gcc and not c89 (= MSVC++)
     with_gnu_ld=yes
     ;;
+  winnt*)
+		#
+		# parity tries to look like gnu ld, but it isn't.
+		#
+    with_gnu_ld=no
+    ;;
   openbsd*)
     with_gnu_ld=no
     ;;
@@ -4516,6 +4714,15 @@
   else
     # PORTME fill in a description of your system's linker (not GNU ld)
     case $host_os in
+
+    winnt*)
+      _LT_TAGVAR(hardcode_direct, $1)=no
+      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags -o $lib'
+      _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+      ;;
+
     aix3*)
       _LT_TAGVAR(allow_undefined_flag, $1)=unsupported
       _LT_TAGVAR(always_export_symbols, $1)=yes
@@ -5813,6 +6020,15 @@
 	_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
 	_LT_TAGVAR(archive_expsym_cmds, $1)='sed "s,^,_," $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \* 262144 + 1342177280` -o $lib'
 	;;
+
+      winnt*)
+        _LT_TAGVAR(hardcode_direct, $1)=no
+        _LT_TAGVAR(hardcode_shlibpath_var, $1)=no
+        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'
+        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags -o $lib'
+        _LT_TAGVAR(archive_cmds_need_lc, $1)=no
+        ;;
+
       irix5* | irix6*)
         case $cc_basename in
           CC*)
@@ -6489,6 +6705,17 @@
   _LT_TAGVAR(postdeps,$1)=
   ;;
 
+winnt*)
+  #
+  # parity does not have verbose output like gcc/g++ have, so
+  # most likely the above will result in nothing. But in worst case
+  # libtool may find something it thinks is a library, so reset things.
+  #
+  _LT_TAGVAR(predep_objects,$1)=
+  _LT_TAGVAR(postdep_objects,$1)=
+  _LT_TAGVAR(postdeps,$1)=
+  ;;
+
 linux*)
   case `$CC -V 2>&1 | sed 5q` in
   *Sun\ C*)
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/libltdl/m4/ltdl.m4 libtool-2.2.6/libltdl/m4/ltdl.m4
--- libtool-2.2.6.orig/libltdl/m4/ltdl.m4	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/libltdl/m4/ltdl.m4	2009-04-01 15:41:40 +0200
@@ -524,6 +524,9 @@
   sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
     libltdl_cv_sys_dlopen_deplibs=yes
     ;;
+  winnt*)
+    libltdl_cv_sys_dlopen_deplibs=yes
+    ;;
   esac
   ])
 if test "$lt_cv_sys_dlopen_deplibs" != yes; then
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/configure-iface.at libtool-2.2.6/tests/configure-iface.at
--- libtool-2.2.6.orig/tests/configure-iface.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/configure-iface.at	2009-04-01 15:41:40 +0200
@@ -31,6 +31,11 @@
 [[#include <ltdl.h>
 #include <stdio.h>
 
+#ifdef _WIN32
+# include <fcntl.h>
+# include <io.h>
+#endif
+
 typedef int funcp (void);
 
 static int errors = 0;
@@ -42,6 +47,14 @@
 
   LTDL_SET_PRELOADED_SYMBOLS();
 
+  #ifdef _WIN32
+	/* This is to keep the testsuite from beeing confused
+	 * by \r\n line endings. This confuses the diff used to
+	 * compare expected with real output. */
+
+  _setmode(_fileno(stdout), _O_BINARY);
+  #endif
+
   if (lt_dlinit () != 0)
     {
       fprintf (stderr, "error during initialization: %s\n", lt_dlerror ());
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/ctor.at libtool-2.2.6/tests/ctor.at
--- libtool-2.2.6.orig/tests/ctor.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/ctor.at	2009-04-01 15:41:40 +0200
@@ -30,13 +30,24 @@
 
 AT_DATA(class.h,
 [[#define magic 0xaabbccdd
+
+/* parity (winnt) supports dllimporting allways, even when building static
+ * libraries. This means we can use dllimport here in any case, since parity
+ * handles things correctly in the static case. Also dllimport is required
+ * only for data symbols. */
+#ifdef __PARITY__
+# define DLLIMPORT __declspec(dllimport)
+#else
+# define DLLIMPORT
+#endif
+
 class Foo {
 public:
 	Foo() { bar = magic; }
 	unsigned bar;
 };
 
-extern Foo instance;
+extern DLLIMPORT Foo instance;
 ]])
 
 AT_DATA(libctor.cpp,
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/demo/foo.c libtool-2.2.6/tests/demo/foo.c
--- libtool-2.2.6.orig/tests/demo/foo.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/demo/foo.c	2009-04-01 15:41:40 +0200
@@ -22,6 +22,11 @@
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
 
+/* On Windows (with parity) we need to manually import data, but only
+ * if not compiling the data itsself, so tell the header that here
+ * we don't import the variable, but define it */
+#define FOO_EXPORTS
+
 #include "foo.h"
 
 #include <stdio.h>
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/demo/foo.h libtool-2.2.6/tests/demo/foo.h
--- libtool-2.2.6.orig/tests/demo/foo.h	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/demo/foo.h	2009-04-01 15:41:40 +0200
@@ -62,6 +62,15 @@
 # define lt_ptr_t     char*
 #endif
 
+/* On Windows (with parity) we need to manually import data symbols.
+ * This can be done even when building static libraries, since parity
+ * handles those invalid imports correctly */
+#if defined(__PARITY__) && !defined(FOO_EXPORTS)
+# define FOO_IMPORT __declspec(dllimport)
+#else
+# define FOO_IMPORT
+#endif
+
 /* Silly constants that the functions return. */
 #define HELLO_RET 0xe110
 #define FOO_RET 0xf00
@@ -71,7 +80,7 @@
 __BEGIN_DECLS
 int foo LT_PARAMS((void));
 int hello LT_PARAMS((void));
-extern int nothing;
+extern FOO_IMPORT int nothing;
 __END_DECLS
 
 #endif /* !_FOO_H_ */
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/depdemo/l1/l1.c libtool-2.2.6/tests/depdemo/l1/l1.c
--- libtool-2.2.6.orig/tests/depdemo/l1/l1.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/depdemo/l1/l1.c	2009-04-01 15:41:40 +0200
@@ -23,6 +23,12 @@
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
 
+
+/* On Windows (with parity) we need to manually import data, but only
+ * if not compiling the data itsself, so tell the header that here
+ * we don't import the variable, but define it */
+#define L1_EXPORTS
+
 #include "l1/l1.h"
 #include <stdio.h>
 
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/depdemo/l1/l1.h libtool-2.2.6/tests/depdemo/l1/l1.h
--- libtool-2.2.6.orig/tests/depdemo/l1/l1.h	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/depdemo/l1/l1.h	2009-04-01 15:41:40 +0200
@@ -29,8 +29,17 @@
 
 #include "sysdep.h"
 
+/* On Windows (with parity) we need to manually import data symbols.
+ * This can be done even when building static libraries, since parity
+ * handles those invalid imports correctly */
+#if defined(__PARITY__) && !defined(L1_EXPORTS)
+# define L1_IMPORT __declspec(dllimport)
+#else
+# define L1_IMPORT
+#endif
+
 __BEGIN_DECLS
-extern int var_l1;
+extern L1_IMPORT int var_l1;
 int	func_l1 __P((int));
 __END_DECLS
 
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/depdemo/l2/l2.c libtool-2.2.6/tests/depdemo/l2/l2.c
--- libtool-2.2.6.orig/tests/depdemo/l2/l2.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/depdemo/l2/l2.c	2009-04-01 15:41:40 +0200
@@ -23,6 +23,11 @@
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
 
+/* On Windows (with parity) we need to manually import data, but only
+ * if not compiling the data itsself, so tell the header that here
+ * we don't import the variable, but define it */
+#define L2_EXPORTS
+
 #include "l2/l2.h"
 
 #include "l1/l1.h"
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/depdemo/l2/l2.h libtool-2.2.6/tests/depdemo/l2/l2.h
--- libtool-2.2.6.orig/tests/depdemo/l2/l2.h	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/depdemo/l2/l2.h	2009-04-01 15:41:40 +0200
@@ -29,8 +29,17 @@
 
 #include "sysdep.h"
 
+/* On Windows (with parity) we need to manually import data symbols.
+ * This can be done even when building static libraries, since parity
+ * handles those invalid imports correctly */
+#if defined(__PARITY__) && !defined(L2_EXPORTS)
+# define L2_IMPORT __declspec(dllimport)
+#else
+# define L2_IMPORT
+#endif
+
 __BEGIN_DECLS
-extern int var_l2;
+extern L2_IMPORT int var_l2;
 int	func_l2 __P((int));
 __END_DECLS
 
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/depdemo/l3/l3.c libtool-2.2.6/tests/depdemo/l3/l3.c
--- libtool-2.2.6.orig/tests/depdemo/l3/l3.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/depdemo/l3/l3.c	2009-04-01 15:41:40 +0200
@@ -23,6 +23,11 @@
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
 
+/* On Windows (with parity) we need to manually import data, but only
+ * if not compiling the data itsself, so tell the header that here
+ * we don't import the variable, but define it */
+#define L3_EXPORTS
+
 #include "l3/l3.h"
 
 #include "l1/l1.h"
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/depdemo/l3/l3.h libtool-2.2.6/tests/depdemo/l3/l3.h
--- libtool-2.2.6.orig/tests/depdemo/l3/l3.h	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/depdemo/l3/l3.h	2009-04-01 15:41:40 +0200
@@ -29,8 +29,17 @@
 
 #include "sysdep.h"
 
+/* On Windows (with parity) we need to manually import data symbols.
+ * This can be done even when building static libraries, since parity
+ * handles those invalid imports correctly */
+#if defined(__PARITY__) && !defined(L3_EXPORTS)
+# define L3_IMPORT __declspec(dllimport)
+#else
+# define L3_IMPORT
+#endif
+
 __BEGIN_DECLS
-extern int var_l3;
+extern L3_IMPORT int var_l3;
 int	func_l3 __P((int));
 __END_DECLS
 
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/depdemo/l4/l4.c libtool-2.2.6/tests/depdemo/l4/l4.c
--- libtool-2.2.6.orig/tests/depdemo/l4/l4.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/depdemo/l4/l4.c	2009-04-01 15:41:40 +0200
@@ -23,6 +23,11 @@
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
 
+/* On Windows (with parity) we need to manually import data, but only
+ * if not compiling the data itsself, so tell the header that here
+ * we don't import the variable, but define it */
+#define L4_EXPORTS
+
 #include "l4/l4.h"
 
 #include "l3/l3.h"
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/depdemo/l4/l4.h libtool-2.2.6/tests/depdemo/l4/l4.h
--- libtool-2.2.6.orig/tests/depdemo/l4/l4.h	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/depdemo/l4/l4.h	2009-04-01 15:41:40 +0200
@@ -29,8 +29,17 @@
 
 #include "sysdep.h"
 
+/* On Windows (with parity) we need to manually import data symbols.
+ * This can be done even when building static libraries, since parity
+ * handles those invalid imports correctly */
+#if defined(__PARITY__) && !defined(L4_EXPORTS)
+# define L4_IMPORT __declspec(dllimport)
+#else
+# define L4_IMPORT
+#endif
+
 __BEGIN_DECLS
-extern int var_l4;
+extern L4_IMPORT int var_l4;
 int	func_l4 __P((int));
 __END_DECLS
 
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/destdir.at libtool-2.2.6/tests/destdir.at
--- libtool-2.2.6.orig/tests/destdir.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/destdir.at	2009-04-01 15:41:40 +0200
@@ -56,7 +56,7 @@
 $LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o liba.la a.lo -rpath $libdir
 echo 'extern int a(); int main() { return a(); }' > m.c
 $CC $CPPFLAGS $CFLAGS -c m.c
-$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o m m.$OBJEXT liba.la
+$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o m$EXEEXT m.$OBJEXT liba.la
 mkdir $DESTDIR$libdir $DESTDIR$bindir
 AT_CHECK([$LIBTOOL --mode=install cp liba.la $DESTDIR$libdir/liba.la],
 	 [], [ignore], [ignore])
@@ -91,7 +91,7 @@
 $LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o liba.la a.lo -rpath $libdir liba1dep.la liba2dep.la
 echo 'extern int a(); int main() { return a(); }' > m.c
 $CC $CPPFLAGS $CFLAGS -c m.c
-$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o m m.$OBJEXT liba.la
+$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o m$EXEEXT m.$OBJEXT liba.la
 mkdir $DESTDIR$libdir $DESTDIR${libdir}2 $DESTDIR$bindir
 AT_CHECK([$LIBTOOL --mode=install cp liba1dep.la $DESTDIR$libdir/liba1dep.la],
 	 [], [ignore], [ignore])
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/duplicate_conv.at libtool-2.2.6/tests/duplicate_conv.at
--- libtool-2.2.6.orig/tests/duplicate_conv.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/duplicate_conv.at	2009-04-01 15:41:40 +0200
@@ -75,12 +75,17 @@
 LT_AT_EXEC_CHECK([./main],[0],[ignore],[ignore])
 $LIBTOOL --mode=clean rm -f libcee.la
 
-# Test whether this works with reloadable objects as well.
-AT_CHECK([$LIBTOOL --mode=link --tag=CC $CC $CFLAGS $LDFLAGS -o cee.$OBJEXT c.lo a/liba.la b/liba.la],
-	 [0], [ignore], [ignore])
-AT_CHECK([$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o main main.$OBJEXT cee.$OBJEXT],
-	 [0], [ignore], [ignore])
-LT_AT_EXEC_CHECK([./main],[0],[ignore],[ignore])
+case $host_os in
+winnt*) ;; # This os does not support reloadable objects!
+*)
+  # Test whether this works with reloadable objects as well.
+  AT_CHECK([$LIBTOOL --mode=link --tag=CC $CC $CFLAGS $LDFLAGS -o cee.$OBJEXT c.lo a/liba.la b/liba.la],
+     [0], [ignore], [ignore])
+  AT_CHECK([$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS -o main main.$OBJEXT cee.$OBJEXT],
+     [0], [ignore], [ignore])
+  LT_AT_EXEC_CHECK([./main],[0],[ignore],[ignore])
+  ;;
+esac
 
 # TODO: test dlpreloading of duplicates (when it is implemented)
 
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/export.at libtool-2.2.6/tests/export.at
--- libtool-2.2.6.orig/tests/export.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/export.at	2009-04-01 15:41:40 +0200
@@ -45,7 +45,19 @@
 extern "C" {
 #endif
 
-int v1;
+/* visual studio seems to behave strangely with uninitialized variables
+ * as it doesn't seem to really define those variables under certain
+ * circumstances if they are not used in this compilation unit. This will
+ * in turn prevent parity from finding this variables for auto-export.
+ * The only possible workaround for this is exporting those uninitialized
+ * variables manually (or don't use uninitialized data...). */
+#if defined(__PARITY__)
+# define DLLEXPORT __declspec(dllexport)
+#else
+# define DLLEXPORT
+#endif
+
+DLLEXPORT int v1;
 static int v2;
 int v3 = 0;
 int v4 = 1;
@@ -63,7 +75,7 @@
 int (*const v12) (void) = v9;
 
 typedef struct { int arr[1000]; } large;
-large v13;
+DLLEXPORT large v13;
 large v14 = { { 0 } };
 large v15 = { { 1 } };
 
@@ -94,7 +106,7 @@
 AT_DATA(main.c,
 [[
 #if defined(LIBA_DLL_IMPORT)
-#  if defined(_WIN32) || defined(WIN32) || defined(__CYGWIN__)
+#  if defined(_WIN32) || defined(WIN32) || defined(__CYGWIN__) || defined(__PARITY__)
 #    define LIBA_SCOPE extern __declspec(dllimport)
 #  endif
 #endif
@@ -104,21 +116,21 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
-extern int v1;
-extern int v3, v4;
+LIBA_SCOPE int v1;
+LIBA_SCOPE int v3, v4;
 LIBA_SCOPE const int v5, v6;
-extern const char* v7;
-extern const char v8[];
-extern int v9(void);
-extern int (*v10) (void);
-extern int (*v11) (void);
+LIBA_SCOPE const char* v7;
+LIBA_SCOPE const char v8[];
+LIBA_SCOPE int v9(void);
+LIBA_SCOPE int (*v10) (void);
+LIBA_SCOPE int (*v11) (void);
 LIBA_SCOPE int (*const v12) (void);
 #ifdef __cplusplus
 }
 #endif
 
 typedef struct { int arr[1000]; } large;
-extern large v13, v14, v15;
+LIBA_SCOPE large v13, v14, v15;
 
 int main (void)
 {
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/link-order.at libtool-2.2.6/tests/link-order.at
--- libtool-2.2.6.orig/tests/link-order.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/link-order.at	2009-04-01 15:41:40 +0200
@@ -48,13 +48,33 @@
   mkdir src
 
   cat >src/a_$i.c <<EOF
-extern int c;
+/* parity (winnt) supports dllimporting allways, even when building static
+ * libraries. This means we can use dllimport here in any case, since parity
+ * handles things correctly in the static case. Also dllimport is required
+ * only for data symbols. */
+#ifdef __PARITY__
+# define DLLIMPORT __declspec(dllimport)
+#else
+# define DLLIMPORT
+#endif
+
+extern DLLIMPORT int c;
 extern int b_$i();
 int a_$i() { return c + b_$i(); }
 EOF
 
   cat >src/b_$i.c <<EOF
-extern int c;
+/* parity (winnt) supports dllimporting allways, even when building static
+ * libraries. This means we can use dllimport here in any case, since parity
+ * handles things correctly in the static case. Also dllimport is required
+ * only for data symbols. */
+#ifdef __PARITY__
+# define DLLIMPORT __declspec(dllimport)
+#else
+# define DLLIMPORT
+#endif
+
+extern DLLIMPORT int c;
 int b_$i() { return 1 + c; }
 EOF
 
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/link-order2.at libtool-2.2.6/tests/link-order2.at
--- libtool-2.2.6.orig/tests/link-order2.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/link-order2.at	2009-04-01 15:41:40 +0200
@@ -97,6 +97,15 @@
 $LIBTOOL --mode=install cp liba0.la $deflibdir/liba0.la
 $LIBTOOL --mode=clean rm -f liba0.la
 
+# on windows the below test will not work (yet), since libb links
+# against the shared liba1.so (which returns 0), and so it will
+# allways load liba1.so and its symbols. Those will never be
+# overridden by liba0.so (which is expected here).
+# There are plans to implement runtime linking emulation in parity,
+# which would make it possible to pass this test. Still there are
+# some problems to be solved before this will be released.
+AT_XFAIL_IF([case $host_os in winnt*) true ;; *) false ;; esac])
+
 for type_of_depdepl in libtool non-libtool; do
   echo "type of depdepl: $type_of_depdepl"
   if test $type_of_depdepl = non-libtool; then
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/lt_dladvise.at libtool-2.2.6/tests/lt_dladvise.at
--- libtool-2.2.6.orig/tests/lt_dladvise.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/lt_dladvise.at	2009-04-01 15:45:27 +0200
@@ -31,6 +31,10 @@
 AT_DATA([main.c],
 [[#include <ltdl.h>
 #include <stdio.h>
+#ifdef _WIN32
+# include <fcntl.h>
+# include <io.h>
+#endif
 
 typedef int funcp (int);
 
@@ -212,6 +216,13 @@
 int
 main (void)
 {
+  #ifdef _WIN32
+	/* This is to keep the testsuite from beeing confused
+	 * by \r\n line endings. This confuses the diff used to
+	 * compare expected with real output. */
+
+  _setmode(_fileno(stdout), _O_BINARY);
+  #endif
 
   LTDL_SET_PRELOADED_SYMBOLS();
 
@@ -270,7 +281,19 @@
 [[#ifdef __cplusplus
 extern "C" {
 #endif
-extern int f (int), i;
+
+/* parity (winnt) supports dllimporting allways, even when building static
+ * libraries. This means we can use dllimport here in any case, since parity
+ * handles things correctly in the static case. Also dllimport is required
+ * only for data symbols. */
+#ifdef __PARITY__
+# define DLLIMPORT __declspec(dllimport)
+#else
+# define DLLIMPORT
+#endif
+
+extern int f (int);
+extern DLLIMPORT int i;
 int g (int x) { return f (i) + x - 3; }
 int j = 4;
 #ifdef __cplusplus
@@ -323,6 +346,13 @@
   # These hosts do not support linking without -no-undefined
   CPPFLAGS="$CPPFLAGS -DHAVE_UNDEFINED_SYMBOLS=0"
   ;;
+winnt*)
+  # This host has implicit -no-undefine behaviour. it would in
+  # theory be possible to implement linking with undefined symbols
+  # (but only at shared library boundaries!), but at the moment
+  # i don't see any advantage in doing so.
+  CPPFLAGS="$CPPFLAGS -DHAVE_UNDEFINED_SYMBOLS=0"
+  ;;
 *)
   CPPFLAGS="$CPPFLAGS -DHAVE_UNDEFINED_SYMBOLS=1"
   dlopenable="$dlopen depend"
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/lt_dlexit.at libtool-2.2.6/tests/lt_dlexit.at
--- libtool-2.2.6.orig/tests/lt_dlexit.at	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/lt_dlexit.at	2009-04-01 15:41:40 +0200
@@ -117,7 +117,19 @@
 [[#ifdef __cplusplus
 extern "C" {
 #endif
-extern int f1 (int), v1;
+
+/* parity (winnt) supports dllimporting allways, even when building static
+ * libraries. This means we can use dllimport here in any case, since parity
+ * handles things correctly in the static case. Also dllimport is required
+ * only for data symbols. */
+#ifdef __PARITY__
+# define DLLIMPORT __declspec(dllimport)
+#else
+# define DLLIMPORT
+#endif
+
+extern int f1 (int);
+extern DLLIMPORT int v1;
 int fb1 (int x) { return f1 (v1) + x - 3; }
 int vb1 = 3;
 #ifdef __cplusplus
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/mdemo/foo1.c libtool-2.2.6/tests/mdemo/foo1.c
--- libtool-2.2.6.orig/tests/mdemo/foo1.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/mdemo/foo1.c	2009-04-01 15:41:40 +0200
@@ -31,7 +31,11 @@
 #define hello	foo1_LTX_hello
 
 /* Give a global variable definition. */
-int nothing;
+
+/* When working on Windows (with or without parity) the variable needs
+ * to be initialized here (or used elsewhere in the file) to be
+ * defined in the object, otherwise its "UNDEF" */
+int nothing = 0;
 
 /* private function */
 int
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/mdemo/foo2.c libtool-2.2.6/tests/mdemo/foo2.c
--- libtool-2.2.6.orig/tests/mdemo/foo2.c	2009-04-01 15:37:20 +0200
+++ libtool-2.2.6/tests/mdemo/foo2.c	2009-04-01 15:41:40 +0200
@@ -31,7 +31,11 @@
 #define hello	libfoo2_LTX_hello
 
 /* Give a global variable definition. */
-int nothing;
+
+/* When working on Windows (with or without parity) the variable needs
+ * to be initialized here (or used elsewhere in the file) to be
+ * defined in the object, otherwise its "UNDEF" */
+int nothing = 0;
 
 /* private function */
 int
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/need_lib_prefix.at libtool-2.2.6/tests/need_lib_prefix.at
--- libtool-2.2.6.orig/tests/need_lib_prefix.at	2009-04-01 15:37:21 +0200
+++ libtool-2.2.6/tests/need_lib_prefix.at	2009-04-01 15:41:40 +0200
@@ -29,6 +29,11 @@
 [[#include <ltdl.h>
 #include <stdio.h>
 
+#ifdef _WIN32
+# include <fcntl.h>
+# include <io.h>
+#endif
+
 typedef int fun (int);
 
 static int errors = 0;
@@ -89,6 +94,14 @@
 
   LTDL_SET_PRELOADED_SYMBOLS();
 
+  #ifdef _WIN32
+	/* This is to keep the testsuite from beeing confused
+	 * by \r\n line endings. This confuses the diff used to
+	 * compare expected with real output. */
+
+  _setmode(_fileno(stdout), _O_BINARY);
+  #endif
+
   if (lt_dlinit() != 0)
     {
       fprintf (stderr, "error during initialization: %s\n", lt_dlerror());
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/pdemo/foo.h libtool-2.2.6/tests/pdemo/foo.h
--- libtool-2.2.6.orig/tests/pdemo/foo.h	2009-04-01 15:37:21 +0200
+++ libtool-2.2.6/tests/pdemo/foo.h	2009-04-01 15:41:40 +0200
@@ -79,6 +79,17 @@
 #  define EXTERN extern
 #endif
 
+/* On Windows (with parity) we need to manually import data symbols.
+ * This can be done even when building static libraries, since parity
+ * handles those invalid imports correctly */
+#if defined(__PARITY__) && !defined(FOO_EXPORTS)
+# define FOO_IMPORT __declspec(dllimport)
+#else
+# define FOO_IMPORT
+#endif
+
+/* Silly constants that the functions return. */
+
 /* Silly constants that the functions return. */
 #define HELLO_RET 0xe110
 #define FOO_RET 0xf00
@@ -89,7 +100,7 @@
 int foo LT_PARAMS((void));
 int foo2 LT_PARAMS((void));
 int hello LT_PARAMS((void));
-EXTERN int nothing;
+EXTERN FOO_IMPORT int nothing;
 __END_DECLS
 
 #endif /* !_FOO_H_ */
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/pdemo/longer_file_name_foo.c libtool-2.2.6/tests/pdemo/longer_file_name_foo.c
--- libtool-2.2.6.orig/tests/pdemo/longer_file_name_foo.c	2009-04-01 15:37:21 +0200
+++ libtool-2.2.6/tests/pdemo/longer_file_name_foo.c	2009-04-01 15:41:40 +0200
@@ -22,6 +22,11 @@
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
 
+/* On Windows (with parity) we need to manually import data, but only
+ * if not compiling the data itsself, so tell the header that here
+ * we don't import the variable, but define it */
+#define FOO_EXPORTS
+
 #define _LIBFOO_COMPILATION_
 #include "foo.h"
 #undef _LIBFOO_COMPILATION_
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/stresstest.at libtool-2.2.6/tests/stresstest.at
--- libtool-2.2.6.orig/tests/stresstest.at	2009-04-01 15:37:21 +0200
+++ libtool-2.2.6/tests/stresstest.at	2009-04-01 15:41:40 +0200
@@ -39,7 +39,20 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
-int v1;
+
+/* visual studio seems to behave strangely with uninitialized variables
+ * as it doesn't seem to really define those variables under certain
+ * circumstances if they are not used in this compilation unit. This will
+ * in turn prevent parity from finding this variables for auto-export.
+ * The only possible workaround for this is exporting those uninitialized
+ * variables manually (or don't use uninitialized data...). */
+#if defined(__PARITY__)
+# define DLLEXPORT __declspec(dllexport)
+#else
+# define DLLEXPORT
+#endif
+
+DLLEXPORT int v1;
 static int v2;
 int v3 = 0;
 int v4 = 1;
@@ -57,7 +70,7 @@
 int (*const v12) (void) = v9;
 
 typedef struct { int arr[1000]; } large;
-large v13;
+DLLEXPORT large v13;
 large v14 = { { 0 } };
 large v15 = { { 1 } };
 #ifdef __cplusplus
@@ -101,21 +114,21 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
-extern int v1;
-extern int v3, v4;
+LIBA_SCOPE int v1;
+LIBA_SCOPE int v3, v4;
 LIBA_SCOPE const int v5, v6;
-extern const char* v7;
-extern const char v8[];
-extern int v9(void);
-extern int (*v10) (void);
-extern int (*v11) (void);
+LIBA_SCOPE const char* v7;
+LIBA_SCOPE const char v8[];
+LIBA_SCOPE int v9(void);
+LIBA_SCOPE int (*v10) (void);
+LIBA_SCOPE int (*v11) (void);
 LIBA_SCOPE int (*const v12) (void);
 #ifdef __cplusplus
 }
 #endif
 
 typedef struct { int arr[1000]; } large;
-extern large v13, v14, v15;
+LIBA_SCOPE large v13, v14, v15;
 
 int main(void)
 {
@@ -139,18 +152,18 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
-extern int v1;
-extern int v3, v4;
+LIBA_SCOPE int v1;
+LIBA_SCOPE int v3, v4;
 LIBA_SCOPE const int v5, v6;
-extern const char* v7;
-extern const char v8[];
-extern int v9(void);
-extern int (*v10) (void);
-extern int (*v11) (void);
+LIBA_SCOPE const char* v7;
+LIBA_SCOPE const char v8[];
+LIBA_SCOPE int v9(void);
+LIBA_SCOPE int (*v10) (void);
+LIBA_SCOPE int (*v11) (void);
 LIBA_SCOPE int (*const v12) (void);
 
 typedef struct { int arr[1000]; } large;
-extern large v13, v14, v15;
+LIBA_SCOPE large v13, v14, v15;
 
 extern int w1;
 extern int w3, w4;
@@ -254,7 +267,8 @@
 	do
           case $st,$l3 in
           ,-rpath*) mst= ;;
-          *) mst=-static ;;
+          -static*) mst=-static ;;
+		  *) mst= ;;
 	  esac
 
 	  LT_AT_CHECK([$LIBTOOL --mode=link $CC $CFLAGS $LDFLAGS $st -o "$rel"main "$rel"main$mst.lo "$rel"sub2/liba.la],
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/template.at libtool-2.2.6/tests/template.at
--- libtool-2.2.6.orig/tests/template.at	2009-04-01 15:37:21 +0200
+++ libtool-2.2.6/tests/template.at	2009-04-01 15:41:40 +0200
@@ -236,14 +236,14 @@
 # both convenience
 AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o lib/liba.la lib/a.lo],
 	 [0], [ignore], [ignore])
-AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o lib2/libb.la lib2/b.lo],
+AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o lib2/libb.la lib2/b.lo lib/liba.la],
 	 [0], [ignore], [ignore])
 AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o sub/main $main_o lib2/libb.la lib/liba.la],
 	 [0], [ignore], [ignore])
 LT_AT_EXEC_CHECK([./sub/main], [ignore])
 # lib convenience
 if $noskip; then
-  AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o lib2/libb.la lib2/b.lo -rpath /foo],
+  AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o lib2/libb.la lib2/b.lo lib/liba.la -rpath /foo],
 	   [0], [ignore], [ignore])
   AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o sub/main $main_o lib2/libb.la lib/liba.la],
 	   [0], [ignore], [ignore])
@@ -253,7 +253,7 @@
 # both installed
 AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o lib/liba.la lib/a.lo -rpath /foo],
 	 [0], [ignore], [ignore])
-AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o lib2/libb.la lib2/b.lo -rpath /bar],
+AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o lib2/libb.la lib2/b.lo lib/liba.la -rpath /bar],
 	 [0], [ignore], [ignore])
 AT_CHECK([$LIBTOOL --tag=CXX --mode=link $CXX $CXXFLAGS $LDFLAGS -o sub/main $main_o lib2/libb.la lib/liba.la],
 	 [0], [ignore], [ignore])
diff -ru -x configure -x Makefile -x Makefile.in -x aclocal.m4 -x 'config.*' -x ltmain.sh -x testsuite -x '*.tex' libtool-2.2.6.orig/tests/testsuite.at libtool-2.2.6/tests/testsuite.at
--- libtool-2.2.6.orig/tests/testsuite.at	2009-04-01 15:37:21 +0200
+++ libtool-2.2.6/tests/testsuite.at	2009-04-01 16:17:31 +0200
@@ -205,7 +205,9 @@
 m4_define([LT_AT_EXEC_CHECK],
 [m4_if([$3], [expout], [_LT_AT_TRANSLATE_TEXT_OUTPUT([$3])])
 m4_if([$4], [experr], [_LT_AT_TRANSLATE_TEXT_OUTPUT([$4])])
-AT_CHECK([$1; lt_status=$?; if test $lt_status -eq 0; then :;
+AT_CHECK([set dummy "$1"; set $][@; shift; lt_exe=$][1; shift;
+       if test -x $lt_exe$EXEEXT; then lt_exe=$lt_exe$EXEEXT; fi
+       eval $lt_exe "$][@"; lt_status=$?; if test $lt_status -eq 0; then :;
 	   elif test "X$host" != "X$build" && \
 	        { test -x "$1" || test -x "$1"$EXEEXT; }
 	   then (exit 77); else (exit $lt_status); fi],[$2],[$3],[$4])
@@ -218,7 +220,9 @@
 m4_define([LT_AT_NOINST_EXEC_CHECK],
 [m4_if([$4], [expout], [_LT_AT_TRANSLATE_TEXT_OUTPUT([$4])])
 m4_if([$5], [experr], [_LT_AT_TRANSLATE_TEXT_OUTPUT([$5])])
-AT_CHECK([$LIBTOOL --mode=execute $2 $1; lt_status=$?;
+AT_CHECK([set dummy "$1"; set $][@; shift; lt_exe=$][1; shift; 
+       if test -x $lt_exe$EXEEXT; then lt_exe=$lt_exe$EXEEXT; fi
+       eval $LIBTOOL --mode=execute $2 $lt_exe "$][@"; lt_status=$?;
 	   if test $lt_status -eq 0; then :;
 	   elif test "X$host" != "X$build" && \
 	        { test -x "$1" || test -x "$1"$EXEEXT; }
diff -ru -x '*.Po' -x '*.Plo' libtool-2.2.6.orig/libltdl/lt__dirent.c libtool-2.2.6/libltdl/lt__dirent.c
--- libtool-2.2.6.orig/libltdl/lt__dirent.c	2009-11-16 11:07:10 +0100
+++ libtool-2.2.6/libltdl/lt__dirent.c	2009-11-16 11:11:22 +0100
@@ -35,7 +35,9 @@
 
 #include "lt__dirent.h"
 
-#if defined(__WINDOWS__)
+/* parity provides it's own dirent implementation on windows,
+ * so avoid compile problems by re-defining these things :) */
+#if defined(__WINDOWS__) && !defined(__PARITY__)
 
 void
 closedir (DIR *entry)
