--- Modules/selectmodule.c.orig	2013-11-11 17:24:34.835918627 +0100
+++ Modules/selectmodule.c	2013-11-11 17:28:20.897906748 +0100
@@ -360,7 +360,8 @@
         assert(i < self->ufd_len);
         /* Never overflow */
         self->ufds[i].fd = (int)PyLong_AsLong(key);
-        self->ufds[i].events = (short)PyLong_AsLong(value);
+        /* Why does a bitfield need to be signed at all? */
+        self->ufds[i].events = (short)PyLong_AsUnsignedLong(value);
         i++;
     }
     assert(i == self->ufd_len);
@@ -380,10 +381,10 @@
 {
     PyObject *o, *key, *value;
     int fd;
-    short events = POLLIN | POLLPRI | POLLOUT;
+    unsigned short events = POLLIN | POLLPRI | POLLOUT;
     int err;
 
-    if (!PyArg_ParseTuple(args, "O|h:register", &o, &events)) {
+    if (!PyArg_ParseTuple(args, "O|H:register", &o, &events)) {
         return NULL;
     }
 
@@ -395,7 +396,7 @@
     key = PyLong_FromLong(fd);
     if (key == NULL)
         return NULL;
-    value = PyLong_FromLong(events);
+    value = PyLong_FromUnsignedLong(events);
     if (value == NULL) {
         Py_DECREF(key);
         return NULL;
@@ -423,10 +424,11 @@
 poll_modify(pollObject *self, PyObject *args)
 {
     PyObject *o, *key, *value;
-    int fd, events;
+    int fd;
+    unsigned short events;
     int err;
 
-    if (!PyArg_ParseTuple(args, "Oi:modify", &o, &events)) {
+    if (!PyArg_ParseTuple(args, "OH:modify", &o, &events)) {
         return NULL;
     }
 
@@ -443,7 +445,7 @@
         Py_DECREF(key);
         return NULL;
     }
-    value = PyLong_FromLong(events);
+    value = PyLong_FromUnsignedLong(events);
     if (value == NULL) {
         Py_DECREF(key);
         return NULL;
@@ -567,11 +569,12 @@
             }
             PyTuple_SET_ITEM(value, 0, num);
 
-            /* The &0xffff is a workaround for AIX.  'revents'
-               is a 16-bit short, and IBM assigned POLLNVAL
+            /* The 'unsigned' cast is necessary for AIX. 'revents'
+               is a 16-bit signed short, but IBM assigned POLLNVAL
                to be 0x8000, so the conversion to int results
-               in a negative number. See SF bug #923315. */
-            num = PyLong_FromLong(self->ufds[i].revents & 0xffff);
+               in a negative number. See issue17919 and issue923315.
+               Why does a bitfield need to be signed at all? */
+            num = PyLong_FromUnsignedLong((unsigned short)self->ufds[i].revents);
             if (num == NULL) {
                 Py_DECREF(value);
                 goto error;
@@ -714,9 +717,10 @@
 internal_devpoll_register(devpollObject *self, PyObject *args, int remove)
 {
     PyObject *o;
-    int fd, events = POLLIN | POLLPRI | POLLOUT;
+    int fd;
+    unsigned short events = POLLIN | POLLPRI | POLLOUT;
 
-    if (!PyArg_ParseTuple(args, "O|i:register", &o, &events)) {
+    if (!PyArg_ParseTuple(args, "O|H:register", &o, &events)) {
         return NULL;
     }
 
@@ -734,7 +738,8 @@
     }
 
     self->fds[self->n_fds].fd = fd;
-    self->fds[self->n_fds].events = events;
+    /* Why does a bitfield need to be signed? */
+    self->fds[self->n_fds].events = (short)events;
 
     if (++self->n_fds == self->max_n_fds) {
         if (devpoll_flush(self))
@@ -862,7 +867,13 @@
     else {
         for (i = 0; i < poll_result; i++) {
             num1 = PyLong_FromLong(self->fds[i].fd);
-            num2 = PyLong_FromLong(self->fds[i].revents);
+            /* The 'unsigned' cast may become necessary for AIX when it
+               starts to provide /dev/poll (maybe never). 'revents'
+               is a 16-bit signed short, but IBM assigned POLLNVAL
+               to be 0x8000, so the conversion to int results
+               in a negative number. See issue17919 and issue923315.
+               Why does a bitfield need to be signed at all? */
+            num2 = PyLong_FromUnsignedLong((unsigned short)self->fds[i].revents);
             if ((num1 == NULL) || (num2 == NULL)) {
                 Py_XDECREF(num1);
                 Py_XDECREF(num2);
