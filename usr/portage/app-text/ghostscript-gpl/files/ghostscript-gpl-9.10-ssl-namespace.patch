--- trio/triodef.h.old	2013-11-09 11:41:31.000000000 +0000
+++ trio/triodef.h	2013-11-09 14:03:33.000000000 +0000
@@ -333,4 +333,12 @@
 # endif
 #endif
 
+#if defined(__MINT__)
+# define TRIO_NO_FLOORL 1
+# define TRIO_NO_CEILL 1
+# define TRIO_NO_POWL 1
+# define TRIO_NO_FMODL 1
+# define TRIO_NO_LOG10L 1
+#endif
+
 #endif /* TRIO_TRIODEF_H */
--- base/sha2.c.old	2013-11-09 11:06:11.000000000 +0000
+++ base/sha2.c	2013-11-09 11:08:14.000000000 +0000
@@ -240,7 +240,7 @@
  * library -- they are intended for private internal visibility/use
  * only.
  */
-void SHA512_Last(SHA512_CTX*);
+void pSHA512_Last(SHA512_CTX*);
 void pSHA256_Transform(SHA256_CTX*, const sha2_word32*);
 void pSHA512_Transform(SHA512_CTX*, const sha2_word64*);
 
@@ -678,7 +678,7 @@
 }
 
 /*** SHA-512: *********************************************************/
-void SHA512_Init(SHA512_CTX* context) {
+void pSHA512_Init(SHA512_CTX* context) {
         if (context == (SHA512_CTX*)0) {
                 return;
         }
@@ -855,7 +855,7 @@
 
 #endif /* SHA2_UNROLL_TRANSFORM */
 
-void SHA512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
+void pSHA512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
         unsigned int	freespace, usedspace;
 
         if (len == 0) {
@@ -903,7 +903,7 @@
         usedspace = freespace = 0;
 }
 
-void SHA512_Last(SHA512_CTX* context) {
+void pSHA512_Last(SHA512_CTX* context) {
         unsigned int	usedspace;
 
         usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
@@ -944,7 +944,7 @@
         pSHA512_Transform(context, (sha2_word64*)context->buffer);
 }
 
-void SHA512_Final(sha2_byte digest[], SHA512_CTX* context) {
+void pSHA512_Final(sha2_byte digest[], SHA512_CTX* context) {
         sha2_word64	*d = (sha2_word64*)digest;
 
         /* Sanity check: */
@@ -952,7 +952,7 @@
 
         /* If no digest buffer is passed, we don't bother doing this: */
         if (digest != (sha2_byte*)0) {
-                SHA512_Last(context);
+                pSHA512_Last(context);
 
                 /* Save the hash data for output: */
 #if BYTE_ORDER == LITTLE_ENDIAN
@@ -973,7 +973,7 @@
         MEMSET_BZERO(context, sizeof(*context));
 }
 
-char *SHA512_End(SHA512_CTX* context, char buffer[]) {
+char *pSHA512_End(SHA512_CTX* context, char buffer[]) {
         sha2_byte	digest[SHA512_DIGEST_LENGTH], *d = digest;
         int		i;
 
@@ -981,7 +981,7 @@
         assert(context != (SHA512_CTX*)0);
 
         if (buffer != (char*)0) {
-                SHA512_Final(digest, context);
+                pSHA512_Final(digest, context);
 
                 for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
                         *buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
@@ -996,16 +996,16 @@
         return buffer;
 }
 
-char* SHA512_Data(const sha2_byte* data, size_t len, char digest[SHA512_DIGEST_STRING_LENGTH]) {
+char* pSHA512_Data(const sha2_byte* data, size_t len, char digest[SHA512_DIGEST_STRING_LENGTH]) {
         SHA512_CTX	context;
 
-        SHA512_Init(&context);
-        SHA512_Update(&context, data, len);
-        return SHA512_End(&context, digest);
+        pSHA512_Init(&context);
+        pSHA512_Update(&context, data, len);
+        return pSHA512_End(&context, digest);
 }
 
 /*** SHA-384: *********************************************************/
-void SHA384_Init(SHA384_CTX* context) {
+void pSHA384_Init(SHA384_CTX* context) {
         if (context == (SHA384_CTX*)0) {
                 return;
         }
@@ -1014,11 +1014,11 @@
         context->bitcount[0] = context->bitcount[1] = 0;
 }
 
-void SHA384_Update(SHA384_CTX* context, const sha2_byte* data, size_t len) {
-        SHA512_Update((SHA512_CTX*)context, data, len);
+void pSHA384_Update(SHA384_CTX* context, const sha2_byte* data, size_t len) {
+        pSHA512_Update((SHA512_CTX*)context, data, len);
 }
 
-void SHA384_Final(sha2_byte digest[], SHA384_CTX* context) {
+void pSHA384_Final(sha2_byte digest[], SHA384_CTX* context) {
         sha2_word64	*d = (sha2_word64*)digest;
 
         /* Sanity check: */
@@ -1026,7 +1026,7 @@
 
         /* If no digest buffer is passed, we don't bother doing this: */
         if (digest != (sha2_byte*)0) {
-                SHA512_Last((SHA512_CTX*)context);
+                pSHA512_Last((SHA512_CTX*)context);
 
                 /* Save the hash data for output: */
 #if BYTE_ORDER == LITTLE_ENDIAN
@@ -1047,7 +1047,7 @@
         MEMSET_BZERO(context, sizeof(*context));
 }
 
-char *SHA384_End(SHA384_CTX* context, char buffer[]) {
+char *pSHA384_End(SHA384_CTX* context, char buffer[]) {
         sha2_byte	digest[SHA384_DIGEST_LENGTH], *d = digest;
         int		i;
 
@@ -1055,7 +1055,7 @@
         assert(context != (SHA384_CTX*)0);
 
         if (buffer != (char*)0) {
-                SHA384_Final(digest, context);
+                pSHA384_Final(digest, context);
 
                 for (i = 0; i < SHA384_DIGEST_LENGTH; i++) {
                         *buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
@@ -1070,10 +1070,10 @@
         return buffer;
 }
 
-char* SHA384_Data(const sha2_byte* data, size_t len, char digest[SHA384_DIGEST_STRING_LENGTH]) {
+char* pSHA384_Data(const sha2_byte* data, size_t len, char digest[SHA384_DIGEST_STRING_LENGTH]) {
         SHA384_CTX	context;
 
-        SHA384_Init(&context);
-        SHA384_Update(&context, data, len);
-        return SHA384_End(&context, digest);
+        pSHA384_Init(&context);
+        pSHA384_Update(&context, data, len);
+        return pSHA384_End(&context, digest);
 }
--- base/sha2.h.old	2013-11-10 17:26:32.101132804 +0000
+++ base/sha2.h	2013-11-10 17:27:30.460132848 +0000
@@ -118,40 +118,40 @@
 void pSHA256_Init(SHA256_CTX *);
 void pSHA256_Update(SHA256_CTX*, const uint8_t*, size_t);
 void pSHA256_Final(uint8_t[SHA256_DIGEST_LENGTH], SHA256_CTX*);
-char* SHA256_End(SHA256_CTX*, char[SHA256_DIGEST_STRING_LENGTH]);
-char* SHA256_Data(const uint8_t*, size_t, char[SHA256_DIGEST_STRING_LENGTH]);
+char* pSHA256_End(SHA256_CTX*, char[SHA256_DIGEST_STRING_LENGTH]);
+char* pSHA256_Data(const uint8_t*, size_t, char[SHA256_DIGEST_STRING_LENGTH]);
 
-void SHA384_Init(SHA384_CTX*);
-void SHA384_Update(SHA384_CTX*, const uint8_t*, size_t);
-void SHA384_Final(uint8_t[SHA384_DIGEST_LENGTH], SHA384_CTX*);
-char* SHA384_End(SHA384_CTX*, char[SHA384_DIGEST_STRING_LENGTH]);
-char* SHA384_Data(const uint8_t*, size_t, char[SHA384_DIGEST_STRING_LENGTH]);
-
-void SHA512_Init(SHA512_CTX*);
-void SHA512_Update(SHA512_CTX*, const uint8_t*, size_t);
-void SHA512_Final(uint8_t[SHA512_DIGEST_LENGTH], SHA512_CTX*);
-char* SHA512_End(SHA512_CTX*, char[SHA512_DIGEST_STRING_LENGTH]);
-char* SHA512_Data(const uint8_t*, size_t, char[SHA512_DIGEST_STRING_LENGTH]);
+void pSHA384_Init(SHA384_CTX*);
+void pSHA384_Update(SHA384_CTX*, const uint8_t*, size_t);
+void pSHA384_Final(uint8_t[SHA384_DIGEST_LENGTH], SHA384_CTX*);
+char* pSHA384_End(SHA384_CTX*, char[SHA384_DIGEST_STRING_LENGTH]);
+char* pSHA384_Data(const uint8_t*, size_t, char[SHA384_DIGEST_STRING_LENGTH]);
+
+void pSHA512_Init(SHA512_CTX*);
+void pSHA512_Update(SHA512_CTX*, const uint8_t*, size_t);
+void pSHA512_Final(uint8_t[SHA512_DIGEST_LENGTH], SHA512_CTX*);
+char* pSHA512_End(SHA512_CTX*, char[SHA512_DIGEST_STRING_LENGTH]);
+char* pSHA512_Data(const uint8_t*, size_t, char[SHA512_DIGEST_STRING_LENGTH]);
 
 #else /* SHA2_USE_INTTYPES_H */
 
 void pSHA256_Init(SHA256_CTX *);
 void pSHA256_Update(SHA256_CTX*, const u_int8_t*, size_t);
 void pSHA256_Final(u_int8_t[SHA256_DIGEST_LENGTH], SHA256_CTX*);
-char* SHA256_End(SHA256_CTX*, char[SHA256_DIGEST_STRING_LENGTH]);
-char* SHA256_Data(const u_int8_t*, size_t, char[SHA256_DIGEST_STRING_LENGTH]);
+char* pSHA256_End(SHA256_CTX*, char[SHA256_DIGEST_STRING_LENGTH]);
+char* pSHA256_Data(const u_int8_t*, size_t, char[SHA256_DIGEST_STRING_LENGTH]);
 
-void SHA384_Init(SHA384_CTX*);
-void SHA384_Update(SHA384_CTX*, const u_int8_t*, size_t);
-void SHA384_Final(u_int8_t[SHA384_DIGEST_LENGTH], SHA384_CTX*);
-char* SHA384_End(SHA384_CTX*, char[SHA384_DIGEST_STRING_LENGTH]);
-char* SHA384_Data(const u_int8_t*, size_t, char[SHA384_DIGEST_STRING_LENGTH]);
-
-void SHA512_Init(SHA512_CTX*);
-void SHA512_Update(SHA512_CTX*, const u_int8_t*, size_t);
-void SHA512_Final(u_int8_t[SHA512_DIGEST_LENGTH], SHA512_CTX*);
-char* SHA512_End(SHA512_CTX*, char[SHA512_DIGEST_STRING_LENGTH]);
-char* SHA512_Data(const u_int8_t*, size_t, char[SHA512_DIGEST_STRING_LENGTH]);
+void pSHA384_Init(SHA384_CTX*);
+void pSHA384_Update(SHA384_CTX*, const u_int8_t*, size_t);
+void pSHA384_Final(u_int8_t[SHA384_DIGEST_LENGTH], SHA384_CTX*);
+char* pSHA384_End(SHA384_CTX*, char[SHA384_DIGEST_STRING_LENGTH]);
+char* pSHA384_Data(const u_int8_t*, size_t, char[SHA384_DIGEST_STRING_LENGTH]);
+
+void pSHA512_Init(SHA512_CTX*);
+void pSHA512_Update(SHA512_CTX*, const u_int8_t*, size_t);
+void pSHA512_Final(u_int8_t[SHA512_DIGEST_LENGTH], SHA512_CTX*);
+char* pSHA512_End(SHA512_CTX*, char[SHA512_DIGEST_STRING_LENGTH]);
+char* pSHA512_Data(const u_int8_t*, size_t, char[SHA512_DIGEST_STRING_LENGTH]);
 
 #endif /* SHA2_USE_INTTYPES_H */
 
@@ -160,20 +160,20 @@
 void pSHA256_Init();
 void pSHA256_Update();
 void pSHA256_Final();
-char* SHA256_End();
-char* SHA256_Data();
+char* pSHA256_End();
+char* pSHA256_Data();
 
-void SHA384_Init();
-void SHA384_Update();
-void SHA384_Final();
-char* SHA384_End();
-char* SHA384_Data();
-
-void SHA512_Init();
-void SHA512_Update();
-void SHA512_Final();
-char* SHA512_End();
-char* SHA512_Data();
+void pSHA384_Init();
+void pSHA384_Update();
+void pSHA384_Final();
+char* pSHA384_End();
+char* pSHA384_Data();
+
+void pSHA512_Init();
+void pSHA512_Update();
+void pSHA512_Final();
+char* pSHA512_End();
+char* pSHA512_Data();
 
 #endif /* NOPROTO */
 
