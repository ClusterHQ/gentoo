diff -ur pth-2.0.7/aclocal.m4 pth-2.0.7-mint/aclocal.m4
--- pth-2.0.7/aclocal.m4	Thu Jun  8 17:54:00 2006
+++ pth-2.0.7-mint/aclocal.m4	Tue Mar 18 20:39:34 2008
@@ -1104,6 +1104,9 @@
     *-*-cygwin* )
         ac_cv_check_sjlj=sjljw32
         ;;
+    *-*-mint* )
+        ac_cv_check_sjlj=sjljmint
+        ;;
 esac
 ])dnl
 $3="$ac_cv_check_sjlj"
diff -ur pth-2.0.7/configure.ac pth-2.0.7-mint/configure.ac
--- pth-2.0.7/configure.ac	Thu Jun  8 17:54:00 2006
+++ pth-2.0.7-mint/configure.ac	Tue Mar 18 20:40:18 2008
@@ -356,7 +360,7 @@
     AC_IFALLYES(func:sigstack,    mctx_stk=ss)
     AC_IFALLYES(func:sigaltstack, mctx_stk=sas)
     case $mctx_dsp in
-         sjljlx|sjljisc|sjljw32 ) mctx_stk=none
+         sjljlx|sjljisc|sjljw32|sjljmint ) mctx_stk=none
     esac
 else
     AC_ERROR([no appropriate mctx method found])
@@ -376,8 +380,8 @@
 AC_ARG_WITH(mctx-dsp,dnl
 [  --with-mctx-dsp=ID      force mctx dispatching (sc,ssjlj,sjlj,usjlj,sjlje,...)],[
 case $withval in
-    sc|ssjlj|sjlj|usjlj|sjlje|sjljlx|sjljisc|sjljw32 ) mctx_dsp=$withval ;;
-    * ) AC_ERROR([invalid mctx dispatching -- allowed: sc,ssjlj,sjlj,usjlj,sjlje,sjljlx,sjljisc,sjljw32]) ;;
+    sc|ssjlj|sjlj|usjlj|sjlje|sjljlx|sjljisc|sjljw32|sjljmint ) mctx_dsp=$withval ;;
+    * ) AC_ERROR([invalid mctx dispatching -- allowed: sc,ssjlj,sjlj,usjlj,sjlje,sjljlx,sjljisc,sjljw32,sjljmint]) ;;
 esac
 ])dnl
 AC_ARG_WITH(mctx-stk,dnl
@@ -438,7 +442,7 @@
         pth_sigsetjmp='setjmp(buf)'
         pth_siglongjmp='longjmp(buf,val)'
         ;;
-    sjljlx|sjljisc|sjljw32 )
+    sjljlx|sjljisc|sjljw32|sjljmint )
         pth_sigjmpbuf='sigjmp_buf'
         pth_sigsetjmp='sigsetjmp(buf,1)'
         pth_siglongjmp='siglongjmp(buf,val)'
diff -ur pth-2.0.7/pth_acmac.h.in pth-2.0.7-mint/pth_acmac.h.in
--- pth-2.0.7/pth_acmac.h.in	Thu Jun  8 17:54:02 2006
+++ pth-2.0.7-mint/pth_acmac.h.in	Tue Mar 18 20:39:34 2008
@@ -55,6 +55,7 @@
 #define PTH_MCTX_DSP_sjljlx  6
 #define PTH_MCTX_DSP_sjljisc 7
 #define PTH_MCTX_DSP_sjljw32 8
+#define PTH_MCTX_DSP_sjljmint 9
 #define PTH_MCTX_STK_mc      1
 #define PTH_MCTX_STK_ss      2
 #define PTH_MCTX_STK_sas     3
diff -ur pth-2.0.7/pth_mctx.c pth-2.0.7-mint/pth_mctx.c
--- pth-2.0.7/pth_mctx.c	Thu Jun  8 17:54:02 2006
+++ pth-2.0.7-mint/pth_mctx.c	Tue Mar 18 20:39:34 2008
@@ -180,7 +180,8 @@
 #elif PTH_MCTX_MTH(sjlj)     &&\
       !PTH_MCTX_DSP(sjljlx)  &&\
       !PTH_MCTX_DSP(sjljisc) &&\
-      !PTH_MCTX_DSP(sjljw32)
+      !PTH_MCTX_DSP(sjljw32) &&\
+      !PTH_MCTX_DSP(sjljmint)
 
 /*
  * VARIANT 2: THE SIGNAL STACK TRICK
@@ -532,6 +533,35 @@
 #endif
     sigemptyset(&mctx->sigs);
     mctx->error = 0;
+    return TRUE;
+}
+
+/*
+ * VARIANT 6: MINT SPECIFIC JMP_BUF FIDDLING
+ *
+ * Oh hell, Mint has setjmp(3), but no sigstack(2) or sigaltstack(2).
+ * So we have to fiddle around with the jmp_buf here too...
+ */
+
+#elif PTH_MCTX_MTH(sjlj) && PTH_MCTX_DSP(sjljmint)
+intern int
+pth_mctx_set(pth_mctx_t *mctx, void (*func)(void),
+             char *sk_addr_lo, char *sk_addr_hi)
+{
+    pth_mctx_save(mctx);
+    sigemptyset(&mctx->sigs);
+
+    mctx->error = 0;
+
+#ifdef __TURBOC__
+	/* Well, it can be supported if you know how Turbo C save the PC
+	   and SP in the jmp_buf (see setjmp.h in the Mintlib include) */
+	#error "Turbo C compiler not supported"
+#else
+    mctx->jb[0] = (char *)func;
+    mctx->jb[12] = sk_addr_hi;
+#endif
+
     return TRUE;
 }
 
diff -ur pth-2.0.7/pthread.c pth-2.0.7-mint/pthread.c
--- pth-2.0.7/pthread.c	Thu Jun  8 17:54:02 2006
+++ pth-2.0.7-mint/pthread.c	Tue Mar 18 20:39:34 2008
@@ -308,7 +308,7 @@
     return OK;
 }
 
-int __pthread_detach(pthread_t thread)
+int pthread_detach(pthread_t thread)
 {
     pth_attr_t na;
 
diff -ur pth-2.0.7/pthread.h.in pth-2.0.7-mint/pthread.h.in
--- pth-2.0.7/pthread.h.in	Thu Jun  8 17:54:02 2006
+++ pth-2.0.7-mint/pthread.h.in	Tue Mar 18 20:39:34 2008
@@ -345,8 +345,7 @@
 
 /* thread routines */
 extern int       pthread_create(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *);
-extern int       __pthread_detach(pthread_t);
-#define          pthread_detach(t) __pthread_detach(t)
+extern int       pthread_detach(pthread_t);
 extern pthread_t pthread_self(void);
 extern int       pthread_equal(pthread_t, pthread_t);
 extern int       pthread_yield_np(void);
@@ -556,8 +555,6 @@
 #define pthread_mutexattr_default  NULL
 #define pthread_once_init          PTHREAD_ONCE_INIT
 
-#define pthread_detach(thread)  __pthread_detach(*(thread))
-
 #define pthread_attr_init       pthread_attr_create
 #define pthread_attr_delete     pthread_attr_destroy
 #define pthread_keycreate       pthread_key_create
