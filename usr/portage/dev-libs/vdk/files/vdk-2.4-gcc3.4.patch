--- vdk/chart.cc_old	2002-05-22 17:26:12.000000000 +0900
+++ vdk/chart.cc	2004-08-05 19:16:35.000000000 +0900
@@ -45,7 +45,10 @@
   size = Usize;
   printf("\nsize:%d,%d",size.x,size.y);
   fflush(stdout);
-  axis = ChartAxis(this,size.X(),size.Y());
+  // patch Bug#262091
+  // axis = ChartAxis(this,size.X(),size.Y());
+  ChartAxis axis_tmp( this, size.X(), size.Y() );
+  axis = axis_tmp;
   axis.Draw();
   DrawTitle();
   DrawChart();
@@ -115,7 +118,10 @@
 void VDKChart::SetChartBorder(int b)
 {
 size = Usize;
-axis = ChartAxis(this,size.X(),size.Y());
+// patch Bug#262091
+// axis = ChartAxis(this,size.X(),size.Y());
+ChartAxis axis_tmp(this,size.X(),size.Y());
+axis = axis_tmp;
 DrawChart();
 }
 /*
@@ -415,10 +421,18 @@
 ChartAxis::ChartAxis(VDKChart* owner,int w, int h):
   owner(owner)
 {
+// patch Bug#262091
+/*
   domain = VDKRect(owner->ChartBorder,
 		   h-owner->ChartBorder,
 		   w-owner->ChartBorder*2,
 		   h-owner->ChartBorder*2);
+*/
+VDKRect r(owner->ChartBorder,
+ 		   h-owner->ChartBorder,
+ 		   w-owner->ChartBorder*2,
+ 		   h-owner->ChartBorder*2);
+domain = r;
 }
 /*
 copy-initializer
--- vdk/vdkbtrees.h_old	2000-11-22 14:10:33.000000000 +0900
+++ vdk/vdkbtrees.h	2004-08-05 19:16:36.000000000 +0900
@@ -717,7 +717,7 @@
 class AbstractRedBlackTree : public AbstractBinaryTree<T, Node> {
 protected:
     virtual Node *FindNode(T q)  
-        { return (root) ? (Node *) root->find(q) : NULL; }
+        { return (this->root) ? (Node *) this->root->find(q) : NULL; }
 };
 
 /*!
@@ -985,14 +985,14 @@
         BlackHeight = -1;
 
     // Check binary tree properties.
-    if (parent != _parent)
+    if (this->parent != _parent)
         return NULL;
-    if (left) {
-        if (object < left->object)
+    if (this->left) {
+        if (this->object < this->left->object)
             return NULL;
     }
-    if (right) {
-        if (right->object < object)
+    if (this->right) {
+        if (this->right->object < this->object)
             return NULL;
     }
 
@@ -1001,15 +1001,15 @@
     // If a node is red, then both its children are black
     // (NULL nodes are black).
     if (clr == Red) {
-        if ((left && left->clr != Black) ||
-            (right && right->clr != Black))
+        if ((this->left && this->left->clr != Black) ||
+            (this->right && this->right->clr != Black))
             return NULL;
     }
 
     // The black-heights of all leaf nodes are equal.
     int bh = NULL;
 
-    if ((! left) && (! right)) {
+    if ((! this->left) && (! this->right)) {
         // Compute black-height of node
         for (Node *sc = (Node *) this; sc; sc = sc->parent)
             if (sc->clr == Black)
@@ -1023,9 +1023,9 @@
                 return NULL;
         }
     }
-    if (left && (! left->CheckTreeProperties((Node *) this)))
+    if (this->left && (! this->left->CheckTreeProperties((Node *) this)))
         return NULL;
-    if (right && (! right->CheckTreeProperties((Node *) this)))
+    if (this->right && (! this->right->CheckTreeProperties((Node *) this)))
         return NULL;
     return 1;
 }
--- vdk/vdkheap.h_old	2000-11-22 14:10:52.000000000 +0900
+++ vdk/vdkheap.h	2004-08-05 19:16:36.000000000 +0900
@@ -85,7 +85,7 @@
 VDKHeap<T>::VDKHeap(T* source, int size): VDKContainer<T>(size) 
 {
   for(int i = 0; i < size; i++)
-    data[i] = source[i];
+    this->data[i] = source[i];
   BuildHeap();
 }
 
@@ -94,13 +94,13 @@
 void VDKHeap<T>::Heapify(int i, int heapsize)
 {
   int l = left(i), r = right(i), largest = i;
-  if( (l < heapsize) && (data[l] > data[i])) largest = l;
-  if( (r < heapsize) && (data[r] > data[largest])) largest = r;
+  if( (l < heapsize) && (this->data[l] > this->data[i])) largest = l;
+  if( (r < heapsize) && (this->data[r] > this->data[largest])) largest = r;
   if(largest != i)
     {
-      T temp = data[i];
-      data[i] = data[largest];
-      data[largest] = temp;
+      T temp = this->data[i];
+      this->data[i] = this->data[largest];
+      this->data[largest] = temp;
       Heapify(largest,heapsize);
     }
 }
@@ -109,21 +109,21 @@
 template <class T>
 void VDKHeap<T>::BuildHeap(void)
 {
-  for (int i = (size()-1)/2 ; i >= 0; i--)	
-    Heapify(i,size());
+  for (int i = (this->size()-1)/2 ; i >= 0; i--)	
+    Heapify(i,this->size());
 }
 
 // HEAPSORT
 template <class T>
 void VDKHeap<T>::Sort(void)
 {
-  int heapsize = size();
+  int heapsize = this->size();
   int i = heapsize-1;
   for(; i > 0; i--)
     {
-      T temp = data[0];
-      data[0] = data[i];
-      data[i] = temp;
+      T temp = this->data[0];
+      this->data[0] = this->data[i];
+      this->data[i] = temp;
       heapsize--;
       Heapify(0,heapsize);
     }
