--- backend/kodakaio.c	2013-03-15 08:24:26.000000000 +0100
+++ backend/kodakaio.c.new	2013-03-15 08:30:06.000000000 +0100
@@ -2129,6 +2129,9 @@
 }
 
 #if HAVE_CUPS
+
+const char * 	_httpResolveURI (const char *uri, char *resolved_uri, size_t resolved_size, int options, int(*cb)(void *context), void *context);
+
 /* ProcessDevice is called by cupsGetDevices to process each discovered device in turn */
 void 
 ProcessDevice(const char *device_class, const char *device_id, const char *device_info, const char *device_make_and_model, const char *device_uri, const char *device_location, void *user_data)
@@ -2172,7 +2175,7 @@
 options |= _HTTP_RESOLVE_FQDN ?  not sure if or when required
 options = 0 seems to work */
 	DBG(5, "using _httpResolveURI\n");
-	resolved = _httpResolveURI(device_uri, uribuffer, sizeof(uribuffer), 0, NULL, NULL);
+	resolved = _httpResolveURI(device_uri, uribuffer, sizeof(uribuffer), 0, 0, NULL);
 
 	/* extract the IP address */
 	if(extract_from_id(resolved, "socket://", ':', ip_addr, sizeof(ip_addr)) != 0) {
@@ -2197,7 +2200,7 @@
 
 	reply = cupsGetDevices(CUPS_HTTP_DEFAULT, CUPS_TIMEOUT_DEFAULT, 
 		"dnssd", CUPS_EXCLUDE_NONE, ProcessDevice, Dummy);
-	if(reply != IPP_OK) printf("Failed cupsGetDevices\n");
+	if(reply != IPP_OK) DBG(1,"Failed cupsGetDevices\n");
 
 	return 0;
 }
