 layer0/ShaderMgr.c                  |   16 ++++++++--------
 layer1/Setting.c                    |    2 +-
 modules/chempy/__init__.py          |    2 +-
 modules/chempy/tinker/__init__.py   |    2 +-
 modules/pymol/commanding.py         |    6 +++---
 modules/pymol/importing.py          |    2 +-
 modules/pymol/wizard/mutagenesis.py |    8 ++++----
 7 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/layer0/ShaderMgr.c b/layer0/ShaderMgr.c
index cc760ae..364277f 100644
--- a/layer0/ShaderMgr.c
+++ b/layer0/ShaderMgr.c
@@ -385,7 +385,7 @@ int CShaderMgr_ShadersPresent(CShaderMgr * I)
 char * CShaderMgr_ReadShaderFromDisk(PyMOLGlobals * G, const char * fileName) {
   FILE* f;
   long size;
-  char* buffer = NULL, *p, *pymol_path, *shader_path, *fullFile;
+  char* buffer = NULL, *p, *pymol_data, *shader_path, *fullFile;
   size_t res;
 
   PRINTFB(G, FB_ShaderMgr, FB_Debugging)
@@ -398,16 +398,16 @@ char * CShaderMgr_ReadShaderFromDisk(PyMOLGlobals * G, const char * fileName) {
     return NULL;
   }
   
-  pymol_path = getenv("PYMOL_PATH");
-  if (!pymol_path){
+  pymol_data = getenv("PYMOL_DATA");
+  if (!pymol_data){
     PRINTFB(G, FB_ShaderMgr, FB_Warnings)
-      " PyMOLShader_NewFromFile-Warning: PYMOL_PATH not set, cannot read shader config files from disk\n" ENDFB(G);
+      " PyMOLShader_NewFromFile-Warning: PYMOL_DATA not set, cannot read shader config files from disk\n" ENDFB(G);
     return NULL;
   }
   /* make this a setting */
-  shader_path = "/data/shaders/";
-  fullFile = malloc( sizeof(char) * (strlen(pymol_path)+strlen(shader_path)+strlen(fileName)+1));
-  fullFile = strcpy(fullFile, pymol_path);
+  shader_path = "/shaders/";
+  fullFile = malloc( sizeof(char) * (strlen(pymol_data)+strlen(shader_path)+strlen(fileName)+1));
+  fullFile = strcpy(fullFile, pymol_data);
   fullFile = strcat(fullFile, shader_path);
   fullFile = strcat(fullFile, fileName);
 
@@ -416,7 +416,7 @@ char * CShaderMgr_ReadShaderFromDisk(PyMOLGlobals * G, const char * fileName) {
 
   if (!f) {
     PRINTFB(G, FB_ShaderMgr, FB_Errors)
-      " PyMOLShader_NewFromFile-Error: Unable to open file '%s' PYMOL_PATH='%s'\n", fullFile, pymol_path ENDFB(G);
+      " PyMOLShader_NewFromFile-Error: Unable to open file '%s' PYMOL_DATA='%s'\n", fullFile, pymol_data ENDFB(G);
     return NULL;
   } else {
     PRINTFB(G, FB_ShaderMgr, FB_Blather)
diff --git a/layer1/Setting.c b/layer1/Setting.c
index c2b8bbb..4c6fdb7 100644
--- a/layer1/Setting.c
+++ b/layer1/Setting.c
@@ -4375,7 +4375,7 @@ void SettingInitGlobal(PyMOLGlobals * G, int alloc, int reset_gui, int use_defau
     set_b(I, cSetting_line_use_shader, 1);
     set_b(I, cSetting_sphere_use_shader, 1);
     set_b(I, cSetting_use_shaders, 0);
-    set_s(I, cSetting_shader_path, "data/shaders");
+    set_s(I, cSetting_shader_path, "shaders");
     set_i(I, cSetting_volume_bit_depth, 8);
     set_color(I, cSetting_volume_color, "-1");
     set_f(I, cSetting_volume_layers, 256);
diff --git a/modules/chempy/__init__.py b/modules/chempy/__init__.py
index 23dbe45..795a223 100644
--- a/modules/chempy/__init__.py
+++ b/modules/chempy/__init__.py
@@ -235,7 +235,7 @@ if os.environ.has_key('CHEMPY_DATA'):  #
 elif os.environ.has_key('PYMOL_DATA'):
     path = os.environ['PYMOL_DATA'] + '/chempy/'
 elif os.environ.has_key('PYMOL_PATH'):
-    path = os.environ['PYMOL_PATH'] + '/data/chempy/'   
+    path = os.environ['PYMOL_PATH'] + '/chempy/'
 elif os.environ.has_key('FREEMOL_MODULES'):
     path = os.environ['FREEMOL_MODULES'] + '/chempy/'
 else:
diff --git a/modules/chempy/tinker/__init__.py b/modules/chempy/tinker/__init__.py
index a2d8eb1..1e48f81 100644
--- a/modules/chempy/tinker/__init__.py
+++ b/modules/chempy/tinker/__init__.py
@@ -147,7 +147,7 @@ else:
 
 if os.environ.has_key('PYMOL_PATH'):
     pymol_path = os.environ['PYMOL_PATH']
-    test_path = pymol_path + '/data/chempy/tinker/'
+    test_path = pymol_path + '/chempy/tinker/'
     if os.path.exists(test_path):
         params_path = test_path
 
diff --git a/modules/pymol/commanding.py b/modules/pymol/commanding.py
index 5a202d0..5cb27a6 100644
--- a/modules/pymol/commanding.py
+++ b/modules/pymol/commanding.py
@@ -219,11 +219,11 @@ USAGE
                 _self.unlock(0,_self)
             r = DEFAULT_SUCCESS
             if show_splash==1: # generic / open-source
-                png_path = _self.exp_path("$PYMOL_PATH/data/pymol/splash.png")
+                png_path = _self.exp_path("$PYMOL_DATA/pymol/splash.png")
             elif show_splash==2: # evaluation builds
-                png_path = _self.exp_path("$PYMOL_PATH/data/pymol/epymol.png")
+                png_path = _self.exp_path("$PYMOL_DATA/pymol/epymol.png")
             else: # incentive builds
-                png_path = _self.exp_path("$PYMOL_PATH/data/pymol/ipymol.png")
+                png_path = _self.exp_path("$PYMOL_DATA/pymol/ipymol.png")
             if os.path.exists(png_path):
                 _self.do("_ cmd.load_png('%s',0,quiet=1)"%png_path)
         else:
diff --git a/modules/pymol/importing.py b/modules/pymol/importing.py
index 457ace7..7cc2953 100644
--- a/modules/pymol/importing.py
+++ b/modules/pymol/importing.py
@@ -191,7 +191,7 @@ SEE ALSO
     '''
         r = DEFAULT_ERROR
         
-        tables = { 'cmyk' : "$PYMOL_PATH/data/pymol/cmyk.png",
+        tables = { 'cmyk' : "$PYMOL_DATA/pymol/cmyk.png",
                    'pymol' : 'pymol',
                    'rgb' : 'rgb',
                    'greyscale': 'greyscale' }
diff --git a/modules/pymol/wizard/mutagenesis.py b/modules/pymol/wizard/mutagenesis.py
index 8a5250d..6c1b26c 100644
--- a/modules/pymol/wizard/mutagenesis.py
+++ b/modules/pymol/wizard/mutagenesis.py
@@ -52,8 +52,8 @@ class Mutagenesis(Wizard):
         
         self.dep = default_dep
 
-        self.ind_library = io.pkl.fromFile(os.environ['PYMOL_PATH']+
-                                           "/data/chempy/sidechains/sc_bb_ind.pkl")
+        self.ind_library = io.pkl.fromFile(os.environ['PYMOL_DATA']+
+                                           "/chempy/sidechains/sc_bb_ind.pkl")
         self.load_library()
         self.status = 0 # 0 no selection, 1 mutagenizing
         self.bump_check = 1
@@ -217,8 +217,8 @@ class Mutagenesis(Wizard):
     def load_library(self):
         if self.dep == 'dep':
             if not hasattr(self,'dep_library'):
-                self.dep_library = io.pkl.fromFile(os.environ['PYMOL_PATH']+
-                                           "/data/chempy/sidechains/sc_bb_dep.pkl")
+                self.dep_library = io.pkl.fromFile(os.environ['PYMOL_DATA']+
+                                           "/chempy/sidechains/sc_bb_dep.pkl")
             
     def set_mode(self,mode):
         cmd=self.cmd
