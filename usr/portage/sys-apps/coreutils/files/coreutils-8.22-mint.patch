http://bugs.gentoo.org/show_bug.cgi?id=260551
http://bugs.gentoo.org/show_bug.cgi?id=264763
http://bugs.gentoo.org/show_bug.cgi?id=497772
https://savannah.gnu.org/patch/index.php?6758

diff -u lib/mountlist.c lib/mountlist.c
--- lib/mountlist.c	2009-02-07 09:58:37.000000000 +0000
+++ lib/mountlist.c	2009-04-08 04:04:19.000000000 +0000
@@ -387,6 +387,7 @@
    If NEED_FS_TYPE is true, ensure that the file system type fields in
    the returned list are valid.  Otherwise, they might not be.  */
 
+#ifndef __MINT__
 struct mount_entry *
 read_file_system_list (bool need_fs_type)
 {
@@ -970,6 +971,84 @@
     return NULL;
   }
 }
+#else /* __MINT__ */
+
+#include <mintbind.h>
+#include <osbind.h>
+#include <sys/statfs.h>
+#include <mint/dcntl.h>
+
+/* get the list of available drives */
+static long
+get_drives(void)
+{
+	long drive_bits;
+	
+	drive_bits = Dsetdrv(Dgetdrv());
+	drive_bits &= ~(1|2); /* exclude all floppies */
+		
+	return drive_bits;
+}
+
+struct mount_entry *
+read_file_system_list (bool need_fs_type)
+{
+	struct mount_entry *mount_list;
+	struct mount_entry *me;
+	struct mount_entry *mtail;
+	struct statfs fsp;
+	struct fs_info info;
+	long drive_bits;
+	int i, j;
+	char lw[] = "a:/", str[25];
+	
+	/* Start the list off with a dummy entry. */
+	me = xmalloc (sizeof (*me));
+	me->me_next = NULL;
+	mount_list = mtail = me;
+	
+	drive_bits = get_drives();
+	for (i = 0; i < 32; i++)
+	{
+		if (drive_bits & (1L << i))
+		{
+			if (i < 26)
+				lw[0] = 'a' + i;
+			else
+				lw[0] = '1' + i - 26;
+			
+			if(statfs(lw, &fsp) == 0)
+			{
+				char name[32];
+
+				me = xmalloc (sizeof (*me));
+				
+				me->me_devname  = xstrdup(lw);
+				me->me_mountdir = xstrdup("u:/");
+				
+				if (lw[0] < 'a')				/* 1: .. 6: */
+					me->me_dev = lw[0] - '1' + 27;
+				else
+					me->me_dev = lw[0] - 'a';
+				
+				get_fsname(lw, NULL, name);
+				me->me_type = xstrdup(name);
+				/* Add to the linked list. */
+				me->me_next = NULL;
+				mtail->me_next = me;
+				mtail = me;
+			}
+		}
+	}
+	
+	/* Free the dummy head. */
+	me = mount_list;
+	mount_list = mount_list->me_next;
+	free(me);
+	return mount_list;
+}
+
+#endif /* __MINT__ */
 
 /* Free a mount entry as returned from read_file_system_list ().  */
 
diff -u src/df.c src/df.c
--- src/df.c	2009-02-14 10:18:27.000000000 +0000
+++ src/df.c	2009-04-08 04:04:19.000000000 +0000
@@ -337,7 +337,12 @@
      It would be better to report on the unmounted file system,
      but statfs doesn't do that on most systems.  */
   if (!stat_file)
+#ifndef __MINT__
     stat_file = mount_point ? mount_point : disk;
+#else
+    /* MiNT: mount_point is always u:/, so use disk */
+    stat_file = disk;
+#endif
 
   if (force_fsu)
     fsu = *force_fsu;
diff -u src/uptime.c src/uptime.c
--- src/uptime.c	2009-01-21 13:33:41.000000000 +0000
+++ src/uptime.c	2009-04-08 04:04:19.000000000 +0000
@@ -17,6 +17,9 @@
 /* Created by hacking who.c by Kaveh Ghazi ghazi@caip.rutgers.edu.  */
 
 #include <config.h>
+#ifdef __MINT__
+#define HAVE_PROC_UPTIME 1
+#endif
 #include <getopt.h>
 #include <stdio.h>
 
@@ -62,7 +65,11 @@
 #ifdef HAVE_PROC_UPTIME
   FILE *fp;
 
+#ifdef __MINT__
+  fp = fopen ("/kern/uptime", "r");
+#else
   fp = fopen ("/proc/uptime", "r");
+#endif
   if (fp != NULL)
     {
       char buf[BUFSIZ];
diff -u Makefile.in Makefile.in
--- Makefile.in	2014-01-07 10:01:01.000000000 +0000
+++ Makefile.in	2014-01-07 10:36:50.000000000 +0000
@@ -3310,7 +3310,7 @@
 # must precede $(LIBINTL) in order to ensure we use GNU getopt.
 # But libcoreutils.a must also follow $(LIBINTL), since libintl uses
 # replacement functions defined in libcoreutils.a.
-LDADD = src/libver.a lib/libcoreutils.a $(LIBINTL) lib/libcoreutils.a
+LDADD = src/libver.a lib/libcoreutils.a $(LIBINTL) lib/libcoreutils.a $(LIB_PTHREAD)
 
 # First, list all programs, to make listing per-program libraries easier.
 # See [ below.
