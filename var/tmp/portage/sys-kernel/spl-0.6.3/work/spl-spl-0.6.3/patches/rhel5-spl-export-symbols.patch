Index: linux+rh+chaos/kernel/sched.c
===================================================================
--- linux+rh+chaos.orig/kernel/sched.c
+++ linux+rh+chaos/kernel/sched.c
@@ -1034,10 +1034,11 @@ static inline void resched_task(struct t
  * task_curr - is this task currently executing on a CPU?
  * @p: the task in question.
  */
-inline int task_curr(const struct task_struct *p)
+int task_curr(const struct task_struct *p)
 {
 	return cpu_curr(task_cpu(p)) == p;
 }
+EXPORT_SYMBOL(task_curr); /* Request export upstream */
 
 /* Used instead of source_load when we know the type == 0 */
 unsigned long weighted_cpuload(const int cpu)
Index: linux+rh+chaos/kernel/time.c
===================================================================
--- linux+rh+chaos.orig/kernel/time.c
+++ linux+rh+chaos/kernel/time.c
@@ -605,6 +605,7 @@ void set_normalized_timespec(struct time
 	ts->tv_sec = sec;
 	ts->tv_nsec = nsec;
 }
+EXPORT_SYMBOL(set_normalized_timespec); /* Exported as of 2.6.26 */
 
 /**
  * ns_to_timespec - Convert nanoseconds to timespec
Index: linux+rh+chaos/kernel/kallsyms.c
===================================================================
--- linux+rh+chaos.orig/kernel/kallsyms.c
+++ linux+rh+chaos/kernel/kallsyms.c
@@ -154,6 +154,7 @@ unsigned long kallsyms_lookup_name(const
 	}
 	return module_kallsyms_lookup_name(name);
 }
+EXPORT_SYMBOL(kallsyms_lookup_name); /* Exported prior to 2.6.19 */
 
 /*
  * Lookup an address
Index: linux+rh+chaos/fs/proc/mmu.c
===================================================================
--- linux+rh+chaos.orig/fs/proc/mmu.c
+++ linux+rh+chaos/fs/proc/mmu.c
@@ -75,3 +75,4 @@ void get_vmalloc_info(struct vmalloc_inf
 		read_unlock(&vmlist_lock);
 	}
 }
+EXPORT_SYMBOL(get_vmalloc_info); /* Request clean upstream API for this */
Index: linux+rh+chaos/mm/mmzone.c
===================================================================
--- linux+rh+chaos.orig/mm/mmzone.c
+++ linux+rh+chaos/mm/mmzone.c
@@ -14,7 +14,7 @@ struct pglist_data *first_online_pgdat(v
 	return NODE_DATA(first_online_node);
 }
 
-EXPORT_UNUSED_SYMBOL(first_online_pgdat);  /*  June 2006  */
+EXPORT_SYMBOL(first_online_pgdat);  /* Exported prior to 2.6.18 */
 
 struct pglist_data *next_online_pgdat(struct pglist_data *pgdat)
 {
@@ -24,7 +24,7 @@ struct pglist_data *next_online_pgdat(st
 		return NULL;
 	return NODE_DATA(nid);
 }
-EXPORT_UNUSED_SYMBOL(next_online_pgdat);  /*  June 2006  */
+EXPORT_SYMBOL(next_online_pgdat);  /* Exported prior to 2.6.18 */
 
 
 /*
@@ -45,5 +45,5 @@ struct zone *next_zone(struct zone *zone
 	}
 	return zone;
 }
-EXPORT_UNUSED_SYMBOL(next_zone);  /*  June 2006  */
+EXPORT_SYMBOL(next_zone);  /* Exported prior to 2.6.18 */
 
Index: linux+rh+chaos/mm/vmstat.c
===================================================================
--- linux+rh+chaos.orig/mm/vmstat.c
+++ linux+rh+chaos/mm/vmstat.c
@@ -45,6 +45,7 @@ void get_zone_counts(unsigned long *acti
 		*free += n;
 	}
 }
+EXPORT_SYMBOL(get_zone_counts); /* Request clean upstream API for this */
 
 #ifdef CONFIG_VM_EVENT_COUNTERS
 DEFINE_PER_CPU(struct vm_event_state, vm_event_states) = {{0}};
